/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.extdatasource.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGetStatsResult implements org.apache.thrift.TBase<TGetStatsResult, TGetStatsResult._Fields>, java.io.Serializable, Cloneable, Comparable<TGetStatsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetStatsResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows_estimate", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ACCEPTED_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("accepted_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetStatsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetStatsResultTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TStatus status; // required
  public long num_rows_estimate; // optional
  public List<Integer> accepted_conjuncts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    NUM_ROWS_ESTIMATE((short)2, "num_rows_estimate"),
    ACCEPTED_CONJUNCTS((short)3, "accepted_conjuncts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // NUM_ROWS_ESTIMATE
          return NUM_ROWS_ESTIMATE;
        case 3: // ACCEPTED_CONJUNCTS
          return ACCEPTED_CONJUNCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROWS_ESTIMATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NUM_ROWS_ESTIMATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.NUM_ROWS_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("num_rows_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCEPTED_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("accepted_conjuncts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetStatsResult.class, metaDataMap);
  }

  public TGetStatsResult() {
  }

  public TGetStatsResult(
    com.cloudera.impala.thrift.TStatus status,
    List<Integer> accepted_conjuncts)
  {
    this();
    this.status = status;
    this.accepted_conjuncts = accepted_conjuncts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetStatsResult(TGetStatsResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new com.cloudera.impala.thrift.TStatus(other.status);
    }
    this.num_rows_estimate = other.num_rows_estimate;
    if (other.isSetAccepted_conjuncts()) {
      List<Integer> __this__accepted_conjuncts = new ArrayList<Integer>(other.accepted_conjuncts);
      this.accepted_conjuncts = __this__accepted_conjuncts;
    }
  }

  public TGetStatsResult deepCopy() {
    return new TGetStatsResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setNum_rows_estimateIsSet(false);
    this.num_rows_estimate = 0;
    this.accepted_conjuncts = null;
  }

  public com.cloudera.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TGetStatsResult setStatus(com.cloudera.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getNum_rows_estimate() {
    return this.num_rows_estimate;
  }

  public TGetStatsResult setNum_rows_estimate(long num_rows_estimate) {
    this.num_rows_estimate = num_rows_estimate;
    setNum_rows_estimateIsSet(true);
    return this;
  }

  public void unsetNum_rows_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field num_rows_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  public void setNum_rows_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ESTIMATE_ISSET_ID, value);
  }

  public int getAccepted_conjunctsSize() {
    return (this.accepted_conjuncts == null) ? 0 : this.accepted_conjuncts.size();
  }

  public java.util.Iterator<Integer> getAccepted_conjunctsIterator() {
    return (this.accepted_conjuncts == null) ? null : this.accepted_conjuncts.iterator();
  }

  public void addToAccepted_conjuncts(int elem) {
    if (this.accepted_conjuncts == null) {
      this.accepted_conjuncts = new ArrayList<Integer>();
    }
    this.accepted_conjuncts.add(elem);
  }

  public List<Integer> getAccepted_conjuncts() {
    return this.accepted_conjuncts;
  }

  public TGetStatsResult setAccepted_conjuncts(List<Integer> accepted_conjuncts) {
    this.accepted_conjuncts = accepted_conjuncts;
    return this;
  }

  public void unsetAccepted_conjuncts() {
    this.accepted_conjuncts = null;
  }

  /** Returns true if field accepted_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetAccepted_conjuncts() {
    return this.accepted_conjuncts != null;
  }

  public void setAccepted_conjunctsIsSet(boolean value) {
    if (!value) {
      this.accepted_conjuncts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    case NUM_ROWS_ESTIMATE:
      if (value == null) {
        unsetNum_rows_estimate();
      } else {
        setNum_rows_estimate((Long)value);
      }
      break;

    case ACCEPTED_CONJUNCTS:
      if (value == null) {
        unsetAccepted_conjuncts();
      } else {
        setAccepted_conjuncts((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case NUM_ROWS_ESTIMATE:
      return Long.valueOf(getNum_rows_estimate());

    case ACCEPTED_CONJUNCTS:
      return getAccepted_conjuncts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case NUM_ROWS_ESTIMATE:
      return isSetNum_rows_estimate();
    case ACCEPTED_CONJUNCTS:
      return isSetAccepted_conjuncts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetStatsResult)
      return this.equals((TGetStatsResult)that);
    return false;
  }

  public boolean equals(TGetStatsResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_num_rows_estimate = true && this.isSetNum_rows_estimate();
    boolean that_present_num_rows_estimate = true && that.isSetNum_rows_estimate();
    if (this_present_num_rows_estimate || that_present_num_rows_estimate) {
      if (!(this_present_num_rows_estimate && that_present_num_rows_estimate))
        return false;
      if (this.num_rows_estimate != that.num_rows_estimate)
        return false;
    }

    boolean this_present_accepted_conjuncts = true && this.isSetAccepted_conjuncts();
    boolean that_present_accepted_conjuncts = true && that.isSetAccepted_conjuncts();
    if (this_present_accepted_conjuncts || that_present_accepted_conjuncts) {
      if (!(this_present_accepted_conjuncts && that_present_accepted_conjuncts))
        return false;
      if (!this.accepted_conjuncts.equals(that.accepted_conjuncts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TGetStatsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_rows_estimate()).compareTo(other.isSetNum_rows_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows_estimate, other.num_rows_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccepted_conjuncts()).compareTo(other.isSetAccepted_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccepted_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accepted_conjuncts, other.accepted_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetStatsResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetNum_rows_estimate()) {
      if (!first) sb.append(", ");
      sb.append("num_rows_estimate:");
      sb.append(this.num_rows_estimate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("accepted_conjuncts:");
    if (this.accepted_conjuncts == null) {
      sb.append("null");
    } else {
      sb.append(this.accepted_conjuncts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetStatsResultStandardSchemeFactory implements SchemeFactory {
    public TGetStatsResultStandardScheme getScheme() {
      return new TGetStatsResultStandardScheme();
    }
  }

  private static class TGetStatsResultStandardScheme extends StandardScheme<TGetStatsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetStatsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.cloudera.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_ROWS_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows_estimate = iprot.readI64();
              struct.setNum_rows_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCEPTED_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.accepted_conjuncts = new ArrayList<Integer>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  int _elem42;
                  _elem42 = iprot.readI32();
                  struct.accepted_conjuncts.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setAccepted_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetStatsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_rows_estimate()) {
        oprot.writeFieldBegin(NUM_ROWS_ESTIMATE_FIELD_DESC);
        oprot.writeI64(struct.num_rows_estimate);
        oprot.writeFieldEnd();
      }
      if (struct.accepted_conjuncts != null) {
        oprot.writeFieldBegin(ACCEPTED_CONJUNCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.accepted_conjuncts.size()));
          for (int _iter43 : struct.accepted_conjuncts)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetStatsResultTupleSchemeFactory implements SchemeFactory {
    public TGetStatsResultTupleScheme getScheme() {
      return new TGetStatsResultTupleScheme();
    }
  }

  private static class TGetStatsResultTupleScheme extends TupleScheme<TGetStatsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetStatsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.status.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetNum_rows_estimate()) {
        optionals.set(0);
      }
      if (struct.isSetAccepted_conjuncts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNum_rows_estimate()) {
        oprot.writeI64(struct.num_rows_estimate);
      }
      if (struct.isSetAccepted_conjuncts()) {
        {
          oprot.writeI32(struct.accepted_conjuncts.size());
          for (int _iter44 : struct.accepted_conjuncts)
          {
            oprot.writeI32(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetStatsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = new com.cloudera.impala.thrift.TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.num_rows_estimate = iprot.readI64();
        struct.setNum_rows_estimateIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.accepted_conjuncts = new ArrayList<Integer>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.accepted_conjuncts.add(_elem47);
          }
        }
        struct.setAccepted_conjunctsIsSet(true);
      }
    }
  }

}

