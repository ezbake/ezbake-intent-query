/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.extdatasource.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBinaryPredicateList implements org.apache.thrift.TBase<TBinaryPredicateList, TBinaryPredicateList._Fields>, java.io.Serializable, Cloneable, Comparable<TBinaryPredicateList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBinaryPredicateList");

  private static final org.apache.thrift.protocol.TField PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("predicates", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBinaryPredicateListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBinaryPredicateListTupleSchemeFactory());
  }

  public List<List<TBinaryPredicate>> predicates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PREDICATES((short)1, "predicates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREDICATES
          return PREDICATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("predicates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBinaryPredicate.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBinaryPredicateList.class, metaDataMap);
  }

  public TBinaryPredicateList() {
  }

  public TBinaryPredicateList(
    List<List<TBinaryPredicate>> predicates)
  {
    this();
    this.predicates = predicates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBinaryPredicateList(TBinaryPredicateList other) {
    if (other.isSetPredicates()) {
      List<List<TBinaryPredicate>> __this__predicates = new ArrayList<List<TBinaryPredicate>>(other.predicates.size());
      for (List<TBinaryPredicate> other_element : other.predicates) {
        List<TBinaryPredicate> __this__predicates_copy = new ArrayList<TBinaryPredicate>(other_element.size());
        for (TBinaryPredicate other_element_element : other_element) {
          __this__predicates_copy.add(new TBinaryPredicate(other_element_element));
        }
        __this__predicates.add(__this__predicates_copy);
      }
      this.predicates = __this__predicates;
    }
  }

  public TBinaryPredicateList deepCopy() {
    return new TBinaryPredicateList(this);
  }

  @Override
  public void clear() {
    this.predicates = null;
  }

  public int getPredicatesSize() {
    return (this.predicates == null) ? 0 : this.predicates.size();
  }

  public java.util.Iterator<List<TBinaryPredicate>> getPredicatesIterator() {
    return (this.predicates == null) ? null : this.predicates.iterator();
  }

  public void addToPredicates(List<TBinaryPredicate> elem) {
    if (this.predicates == null) {
      this.predicates = new ArrayList<List<TBinaryPredicate>>();
    }
    this.predicates.add(elem);
  }

  public List<List<TBinaryPredicate>> getPredicates() {
    return this.predicates;
  }

  public TBinaryPredicateList setPredicates(List<List<TBinaryPredicate>> predicates) {
    this.predicates = predicates;
    return this;
  }

  public void unsetPredicates() {
    this.predicates = null;
  }

  /** Returns true if field predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetPredicates() {
    return this.predicates != null;
  }

  public void setPredicatesIsSet(boolean value) {
    if (!value) {
      this.predicates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PREDICATES:
      if (value == null) {
        unsetPredicates();
      } else {
        setPredicates((List<List<TBinaryPredicate>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PREDICATES:
      return getPredicates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PREDICATES:
      return isSetPredicates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBinaryPredicateList)
      return this.equals((TBinaryPredicateList)that);
    return false;
  }

  public boolean equals(TBinaryPredicateList that) {
    if (that == null)
      return false;

    boolean this_present_predicates = true && this.isSetPredicates();
    boolean that_present_predicates = true && that.isSetPredicates();
    if (this_present_predicates || that_present_predicates) {
      if (!(this_present_predicates && that_present_predicates))
        return false;
      if (!this.predicates.equals(that.predicates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TBinaryPredicateList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPredicates()).compareTo(other.isSetPredicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicates, other.predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBinaryPredicateList(");
    boolean first = true;

    sb.append("predicates:");
    if (this.predicates == null) {
      sb.append("null");
    } else {
      sb.append(this.predicates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (predicates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'predicates' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBinaryPredicateListStandardSchemeFactory implements SchemeFactory {
    public TBinaryPredicateListStandardScheme getScheme() {
      return new TBinaryPredicateListStandardScheme();
    }
  }

  private static class TBinaryPredicateListStandardScheme extends StandardScheme<TBinaryPredicateList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBinaryPredicateList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.predicates = new ArrayList<List<TBinaryPredicate>>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  List<TBinaryPredicate> _elem18;
                  {
                    org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                    _elem18 = new ArrayList<TBinaryPredicate>(_list19.size);
                    for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                    {
                      TBinaryPredicate _elem21;
                      _elem21 = new TBinaryPredicate();
                      _elem21.read(iprot);
                      _elem18.add(_elem21);
                    }
                    iprot.readListEnd();
                  }
                  struct.predicates.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setPredicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBinaryPredicateList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.predicates != null) {
        oprot.writeFieldBegin(PREDICATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.predicates.size()));
          for (List<TBinaryPredicate> _iter22 : struct.predicates)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter22.size()));
              for (TBinaryPredicate _iter23 : _iter22)
              {
                _iter23.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBinaryPredicateListTupleSchemeFactory implements SchemeFactory {
    public TBinaryPredicateListTupleScheme getScheme() {
      return new TBinaryPredicateListTupleScheme();
    }
  }

  private static class TBinaryPredicateListTupleScheme extends TupleScheme<TBinaryPredicateList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBinaryPredicateList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.predicates.size());
        for (List<TBinaryPredicate> _iter24 : struct.predicates)
        {
          {
            oprot.writeI32(_iter24.size());
            for (TBinaryPredicate _iter25 : _iter24)
            {
              _iter25.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBinaryPredicateList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.predicates = new ArrayList<List<TBinaryPredicate>>(_list26.size);
        for (int _i27 = 0; _i27 < _list26.size; ++_i27)
        {
          List<TBinaryPredicate> _elem28;
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem28 = new ArrayList<TBinaryPredicate>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              TBinaryPredicate _elem31;
              _elem31 = new TBinaryPredicate();
              _elem31.read(iprot);
              _elem28.add(_elem31);
            }
          }
          struct.predicates.add(_elem28);
        }
      }
      struct.setPredicatesIsSet(true);
    }
  }

}

