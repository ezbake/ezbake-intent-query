/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TColumnData implements org.apache.thrift.TBase<TColumnData, TColumnData._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnData");

  private static final org.apache.thrift.protocol.TField IS_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_null", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_vals", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_vals", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SHORT_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("short_vals", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INT_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("int_vals", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LONG_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("long_vals", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("double_vals", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField STRING_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("string_vals", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BINARY_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_vals", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnDataTupleSchemeFactory());
  }

  public List<Boolean> is_null; // required
  public List<Boolean> bool_vals; // optional
  public List<Byte> byte_vals; // optional
  public List<Short> short_vals; // optional
  public List<Integer> int_vals; // optional
  public List<Long> long_vals; // optional
  public List<Double> double_vals; // optional
  public List<String> string_vals; // optional
  public List<ByteBuffer> binary_vals; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_NULL((short)1, "is_null"),
    BOOL_VALS((short)2, "bool_vals"),
    BYTE_VALS((short)3, "byte_vals"),
    SHORT_VALS((short)4, "short_vals"),
    INT_VALS((short)5, "int_vals"),
    LONG_VALS((short)6, "long_vals"),
    DOUBLE_VALS((short)7, "double_vals"),
    STRING_VALS((short)8, "string_vals"),
    BINARY_VALS((short)9, "binary_vals");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_NULL
          return IS_NULL;
        case 2: // BOOL_VALS
          return BOOL_VALS;
        case 3: // BYTE_VALS
          return BYTE_VALS;
        case 4: // SHORT_VALS
          return SHORT_VALS;
        case 5: // INT_VALS
          return INT_VALS;
        case 6: // LONG_VALS
          return LONG_VALS;
        case 7: // DOUBLE_VALS
          return DOUBLE_VALS;
        case 8: // STRING_VALS
          return STRING_VALS;
        case 9: // BINARY_VALS
          return BINARY_VALS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BOOL_VALS,_Fields.BYTE_VALS,_Fields.SHORT_VALS,_Fields.INT_VALS,_Fields.LONG_VALS,_Fields.DOUBLE_VALS,_Fields.STRING_VALS,_Fields.BINARY_VALS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_NULL, new org.apache.thrift.meta_data.FieldMetaData("is_null", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BOOL_VALS, new org.apache.thrift.meta_data.FieldMetaData("bool_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BYTE_VALS, new org.apache.thrift.meta_data.FieldMetaData("byte_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_VALS, new org.apache.thrift.meta_data.FieldMetaData("short_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_VALS, new org.apache.thrift.meta_data.FieldMetaData("int_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_VALS, new org.apache.thrift.meta_data.FieldMetaData("long_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_VALS, new org.apache.thrift.meta_data.FieldMetaData("double_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_VALS, new org.apache.thrift.meta_data.FieldMetaData("string_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_VALS, new org.apache.thrift.meta_data.FieldMetaData("binary_vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnData.class, metaDataMap);
  }

  public TColumnData() {
  }

  public TColumnData(
    List<Boolean> is_null)
  {
    this();
    this.is_null = is_null;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnData(TColumnData other) {
    if (other.isSetIs_null()) {
      List<Boolean> __this__is_null = new ArrayList<Boolean>(other.is_null);
      this.is_null = __this__is_null;
    }
    if (other.isSetBool_vals()) {
      List<Boolean> __this__bool_vals = new ArrayList<Boolean>(other.bool_vals);
      this.bool_vals = __this__bool_vals;
    }
    if (other.isSetByte_vals()) {
      List<Byte> __this__byte_vals = new ArrayList<Byte>(other.byte_vals);
      this.byte_vals = __this__byte_vals;
    }
    if (other.isSetShort_vals()) {
      List<Short> __this__short_vals = new ArrayList<Short>(other.short_vals);
      this.short_vals = __this__short_vals;
    }
    if (other.isSetInt_vals()) {
      List<Integer> __this__int_vals = new ArrayList<Integer>(other.int_vals);
      this.int_vals = __this__int_vals;
    }
    if (other.isSetLong_vals()) {
      List<Long> __this__long_vals = new ArrayList<Long>(other.long_vals);
      this.long_vals = __this__long_vals;
    }
    if (other.isSetDouble_vals()) {
      List<Double> __this__double_vals = new ArrayList<Double>(other.double_vals);
      this.double_vals = __this__double_vals;
    }
    if (other.isSetString_vals()) {
      List<String> __this__string_vals = new ArrayList<String>(other.string_vals);
      this.string_vals = __this__string_vals;
    }
    if (other.isSetBinary_vals()) {
      List<ByteBuffer> __this__binary_vals = new ArrayList<ByteBuffer>(other.binary_vals);
      this.binary_vals = __this__binary_vals;
    }
  }

  public TColumnData deepCopy() {
    return new TColumnData(this);
  }

  @Override
  public void clear() {
    this.is_null = null;
    this.bool_vals = null;
    this.byte_vals = null;
    this.short_vals = null;
    this.int_vals = null;
    this.long_vals = null;
    this.double_vals = null;
    this.string_vals = null;
    this.binary_vals = null;
  }

  public int getIs_nullSize() {
    return (this.is_null == null) ? 0 : this.is_null.size();
  }

  public java.util.Iterator<Boolean> getIs_nullIterator() {
    return (this.is_null == null) ? null : this.is_null.iterator();
  }

  public void addToIs_null(boolean elem) {
    if (this.is_null == null) {
      this.is_null = new ArrayList<Boolean>();
    }
    this.is_null.add(elem);
  }

  public List<Boolean> getIs_null() {
    return this.is_null;
  }

  public TColumnData setIs_null(List<Boolean> is_null) {
    this.is_null = is_null;
    return this;
  }

  public void unsetIs_null() {
    this.is_null = null;
  }

  /** Returns true if field is_null is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_null() {
    return this.is_null != null;
  }

  public void setIs_nullIsSet(boolean value) {
    if (!value) {
      this.is_null = null;
    }
  }

  public int getBool_valsSize() {
    return (this.bool_vals == null) ? 0 : this.bool_vals.size();
  }

  public java.util.Iterator<Boolean> getBool_valsIterator() {
    return (this.bool_vals == null) ? null : this.bool_vals.iterator();
  }

  public void addToBool_vals(boolean elem) {
    if (this.bool_vals == null) {
      this.bool_vals = new ArrayList<Boolean>();
    }
    this.bool_vals.add(elem);
  }

  public List<Boolean> getBool_vals() {
    return this.bool_vals;
  }

  public TColumnData setBool_vals(List<Boolean> bool_vals) {
    this.bool_vals = bool_vals;
    return this;
  }

  public void unsetBool_vals() {
    this.bool_vals = null;
  }

  /** Returns true if field bool_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_vals() {
    return this.bool_vals != null;
  }

  public void setBool_valsIsSet(boolean value) {
    if (!value) {
      this.bool_vals = null;
    }
  }

  public int getByte_valsSize() {
    return (this.byte_vals == null) ? 0 : this.byte_vals.size();
  }

  public java.util.Iterator<Byte> getByte_valsIterator() {
    return (this.byte_vals == null) ? null : this.byte_vals.iterator();
  }

  public void addToByte_vals(byte elem) {
    if (this.byte_vals == null) {
      this.byte_vals = new ArrayList<Byte>();
    }
    this.byte_vals.add(elem);
  }

  public List<Byte> getByte_vals() {
    return this.byte_vals;
  }

  public TColumnData setByte_vals(List<Byte> byte_vals) {
    this.byte_vals = byte_vals;
    return this;
  }

  public void unsetByte_vals() {
    this.byte_vals = null;
  }

  /** Returns true if field byte_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_vals() {
    return this.byte_vals != null;
  }

  public void setByte_valsIsSet(boolean value) {
    if (!value) {
      this.byte_vals = null;
    }
  }

  public int getShort_valsSize() {
    return (this.short_vals == null) ? 0 : this.short_vals.size();
  }

  public java.util.Iterator<Short> getShort_valsIterator() {
    return (this.short_vals == null) ? null : this.short_vals.iterator();
  }

  public void addToShort_vals(short elem) {
    if (this.short_vals == null) {
      this.short_vals = new ArrayList<Short>();
    }
    this.short_vals.add(elem);
  }

  public List<Short> getShort_vals() {
    return this.short_vals;
  }

  public TColumnData setShort_vals(List<Short> short_vals) {
    this.short_vals = short_vals;
    return this;
  }

  public void unsetShort_vals() {
    this.short_vals = null;
  }

  /** Returns true if field short_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_vals() {
    return this.short_vals != null;
  }

  public void setShort_valsIsSet(boolean value) {
    if (!value) {
      this.short_vals = null;
    }
  }

  public int getInt_valsSize() {
    return (this.int_vals == null) ? 0 : this.int_vals.size();
  }

  public java.util.Iterator<Integer> getInt_valsIterator() {
    return (this.int_vals == null) ? null : this.int_vals.iterator();
  }

  public void addToInt_vals(int elem) {
    if (this.int_vals == null) {
      this.int_vals = new ArrayList<Integer>();
    }
    this.int_vals.add(elem);
  }

  public List<Integer> getInt_vals() {
    return this.int_vals;
  }

  public TColumnData setInt_vals(List<Integer> int_vals) {
    this.int_vals = int_vals;
    return this;
  }

  public void unsetInt_vals() {
    this.int_vals = null;
  }

  /** Returns true if field int_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_vals() {
    return this.int_vals != null;
  }

  public void setInt_valsIsSet(boolean value) {
    if (!value) {
      this.int_vals = null;
    }
  }

  public int getLong_valsSize() {
    return (this.long_vals == null) ? 0 : this.long_vals.size();
  }

  public java.util.Iterator<Long> getLong_valsIterator() {
    return (this.long_vals == null) ? null : this.long_vals.iterator();
  }

  public void addToLong_vals(long elem) {
    if (this.long_vals == null) {
      this.long_vals = new ArrayList<Long>();
    }
    this.long_vals.add(elem);
  }

  public List<Long> getLong_vals() {
    return this.long_vals;
  }

  public TColumnData setLong_vals(List<Long> long_vals) {
    this.long_vals = long_vals;
    return this;
  }

  public void unsetLong_vals() {
    this.long_vals = null;
  }

  /** Returns true if field long_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetLong_vals() {
    return this.long_vals != null;
  }

  public void setLong_valsIsSet(boolean value) {
    if (!value) {
      this.long_vals = null;
    }
  }

  public int getDouble_valsSize() {
    return (this.double_vals == null) ? 0 : this.double_vals.size();
  }

  public java.util.Iterator<Double> getDouble_valsIterator() {
    return (this.double_vals == null) ? null : this.double_vals.iterator();
  }

  public void addToDouble_vals(double elem) {
    if (this.double_vals == null) {
      this.double_vals = new ArrayList<Double>();
    }
    this.double_vals.add(elem);
  }

  public List<Double> getDouble_vals() {
    return this.double_vals;
  }

  public TColumnData setDouble_vals(List<Double> double_vals) {
    this.double_vals = double_vals;
    return this;
  }

  public void unsetDouble_vals() {
    this.double_vals = null;
  }

  /** Returns true if field double_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_vals() {
    return this.double_vals != null;
  }

  public void setDouble_valsIsSet(boolean value) {
    if (!value) {
      this.double_vals = null;
    }
  }

  public int getString_valsSize() {
    return (this.string_vals == null) ? 0 : this.string_vals.size();
  }

  public java.util.Iterator<String> getString_valsIterator() {
    return (this.string_vals == null) ? null : this.string_vals.iterator();
  }

  public void addToString_vals(String elem) {
    if (this.string_vals == null) {
      this.string_vals = new ArrayList<String>();
    }
    this.string_vals.add(elem);
  }

  public List<String> getString_vals() {
    return this.string_vals;
  }

  public TColumnData setString_vals(List<String> string_vals) {
    this.string_vals = string_vals;
    return this;
  }

  public void unsetString_vals() {
    this.string_vals = null;
  }

  /** Returns true if field string_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetString_vals() {
    return this.string_vals != null;
  }

  public void setString_valsIsSet(boolean value) {
    if (!value) {
      this.string_vals = null;
    }
  }

  public int getBinary_valsSize() {
    return (this.binary_vals == null) ? 0 : this.binary_vals.size();
  }

  public java.util.Iterator<ByteBuffer> getBinary_valsIterator() {
    return (this.binary_vals == null) ? null : this.binary_vals.iterator();
  }

  public void addToBinary_vals(ByteBuffer elem) {
    if (this.binary_vals == null) {
      this.binary_vals = new ArrayList<ByteBuffer>();
    }
    this.binary_vals.add(elem);
  }

  public List<ByteBuffer> getBinary_vals() {
    return this.binary_vals;
  }

  public TColumnData setBinary_vals(List<ByteBuffer> binary_vals) {
    this.binary_vals = binary_vals;
    return this;
  }

  public void unsetBinary_vals() {
    this.binary_vals = null;
  }

  /** Returns true if field binary_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_vals() {
    return this.binary_vals != null;
  }

  public void setBinary_valsIsSet(boolean value) {
    if (!value) {
      this.binary_vals = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_NULL:
      if (value == null) {
        unsetIs_null();
      } else {
        setIs_null((List<Boolean>)value);
      }
      break;

    case BOOL_VALS:
      if (value == null) {
        unsetBool_vals();
      } else {
        setBool_vals((List<Boolean>)value);
      }
      break;

    case BYTE_VALS:
      if (value == null) {
        unsetByte_vals();
      } else {
        setByte_vals((List<Byte>)value);
      }
      break;

    case SHORT_VALS:
      if (value == null) {
        unsetShort_vals();
      } else {
        setShort_vals((List<Short>)value);
      }
      break;

    case INT_VALS:
      if (value == null) {
        unsetInt_vals();
      } else {
        setInt_vals((List<Integer>)value);
      }
      break;

    case LONG_VALS:
      if (value == null) {
        unsetLong_vals();
      } else {
        setLong_vals((List<Long>)value);
      }
      break;

    case DOUBLE_VALS:
      if (value == null) {
        unsetDouble_vals();
      } else {
        setDouble_vals((List<Double>)value);
      }
      break;

    case STRING_VALS:
      if (value == null) {
        unsetString_vals();
      } else {
        setString_vals((List<String>)value);
      }
      break;

    case BINARY_VALS:
      if (value == null) {
        unsetBinary_vals();
      } else {
        setBinary_vals((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_NULL:
      return getIs_null();

    case BOOL_VALS:
      return getBool_vals();

    case BYTE_VALS:
      return getByte_vals();

    case SHORT_VALS:
      return getShort_vals();

    case INT_VALS:
      return getInt_vals();

    case LONG_VALS:
      return getLong_vals();

    case DOUBLE_VALS:
      return getDouble_vals();

    case STRING_VALS:
      return getString_vals();

    case BINARY_VALS:
      return getBinary_vals();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_NULL:
      return isSetIs_null();
    case BOOL_VALS:
      return isSetBool_vals();
    case BYTE_VALS:
      return isSetByte_vals();
    case SHORT_VALS:
      return isSetShort_vals();
    case INT_VALS:
      return isSetInt_vals();
    case LONG_VALS:
      return isSetLong_vals();
    case DOUBLE_VALS:
      return isSetDouble_vals();
    case STRING_VALS:
      return isSetString_vals();
    case BINARY_VALS:
      return isSetBinary_vals();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnData)
      return this.equals((TColumnData)that);
    return false;
  }

  public boolean equals(TColumnData that) {
    if (that == null)
      return false;

    boolean this_present_is_null = true && this.isSetIs_null();
    boolean that_present_is_null = true && that.isSetIs_null();
    if (this_present_is_null || that_present_is_null) {
      if (!(this_present_is_null && that_present_is_null))
        return false;
      if (!this.is_null.equals(that.is_null))
        return false;
    }

    boolean this_present_bool_vals = true && this.isSetBool_vals();
    boolean that_present_bool_vals = true && that.isSetBool_vals();
    if (this_present_bool_vals || that_present_bool_vals) {
      if (!(this_present_bool_vals && that_present_bool_vals))
        return false;
      if (!this.bool_vals.equals(that.bool_vals))
        return false;
    }

    boolean this_present_byte_vals = true && this.isSetByte_vals();
    boolean that_present_byte_vals = true && that.isSetByte_vals();
    if (this_present_byte_vals || that_present_byte_vals) {
      if (!(this_present_byte_vals && that_present_byte_vals))
        return false;
      if (!this.byte_vals.equals(that.byte_vals))
        return false;
    }

    boolean this_present_short_vals = true && this.isSetShort_vals();
    boolean that_present_short_vals = true && that.isSetShort_vals();
    if (this_present_short_vals || that_present_short_vals) {
      if (!(this_present_short_vals && that_present_short_vals))
        return false;
      if (!this.short_vals.equals(that.short_vals))
        return false;
    }

    boolean this_present_int_vals = true && this.isSetInt_vals();
    boolean that_present_int_vals = true && that.isSetInt_vals();
    if (this_present_int_vals || that_present_int_vals) {
      if (!(this_present_int_vals && that_present_int_vals))
        return false;
      if (!this.int_vals.equals(that.int_vals))
        return false;
    }

    boolean this_present_long_vals = true && this.isSetLong_vals();
    boolean that_present_long_vals = true && that.isSetLong_vals();
    if (this_present_long_vals || that_present_long_vals) {
      if (!(this_present_long_vals && that_present_long_vals))
        return false;
      if (!this.long_vals.equals(that.long_vals))
        return false;
    }

    boolean this_present_double_vals = true && this.isSetDouble_vals();
    boolean that_present_double_vals = true && that.isSetDouble_vals();
    if (this_present_double_vals || that_present_double_vals) {
      if (!(this_present_double_vals && that_present_double_vals))
        return false;
      if (!this.double_vals.equals(that.double_vals))
        return false;
    }

    boolean this_present_string_vals = true && this.isSetString_vals();
    boolean that_present_string_vals = true && that.isSetString_vals();
    if (this_present_string_vals || that_present_string_vals) {
      if (!(this_present_string_vals && that_present_string_vals))
        return false;
      if (!this.string_vals.equals(that.string_vals))
        return false;
    }

    boolean this_present_binary_vals = true && this.isSetBinary_vals();
    boolean that_present_binary_vals = true && that.isSetBinary_vals();
    if (this_present_binary_vals || that_present_binary_vals) {
      if (!(this_present_binary_vals && that_present_binary_vals))
        return false;
      if (!this.binary_vals.equals(that.binary_vals))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TColumnData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIs_null()).compareTo(other.isSetIs_null());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_null()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_null, other.is_null);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBool_vals()).compareTo(other.isSetBool_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_vals, other.bool_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_vals()).compareTo(other.isSetByte_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_vals, other.byte_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShort_vals()).compareTo(other.isSetShort_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_vals, other.short_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_vals()).compareTo(other.isSetInt_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_vals, other.int_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLong_vals()).compareTo(other.isSetLong_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_vals, other.long_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_vals()).compareTo(other.isSetDouble_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_vals, other.double_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_vals()).compareTo(other.isSetString_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_vals, other.string_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_vals()).compareTo(other.isSetBinary_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_vals, other.binary_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumnData(");
    boolean first = true;

    sb.append("is_null:");
    if (this.is_null == null) {
      sb.append("null");
    } else {
      sb.append(this.is_null);
    }
    first = false;
    if (isSetBool_vals()) {
      if (!first) sb.append(", ");
      sb.append("bool_vals:");
      if (this.bool_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.bool_vals);
      }
      first = false;
    }
    if (isSetByte_vals()) {
      if (!first) sb.append(", ");
      sb.append("byte_vals:");
      if (this.byte_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.byte_vals);
      }
      first = false;
    }
    if (isSetShort_vals()) {
      if (!first) sb.append(", ");
      sb.append("short_vals:");
      if (this.short_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.short_vals);
      }
      first = false;
    }
    if (isSetInt_vals()) {
      if (!first) sb.append(", ");
      sb.append("int_vals:");
      if (this.int_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.int_vals);
      }
      first = false;
    }
    if (isSetLong_vals()) {
      if (!first) sb.append(", ");
      sb.append("long_vals:");
      if (this.long_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.long_vals);
      }
      first = false;
    }
    if (isSetDouble_vals()) {
      if (!first) sb.append(", ");
      sb.append("double_vals:");
      if (this.double_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.double_vals);
      }
      first = false;
    }
    if (isSetString_vals()) {
      if (!first) sb.append(", ");
      sb.append("string_vals:");
      if (this.string_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.string_vals);
      }
      first = false;
    }
    if (isSetBinary_vals()) {
      if (!first) sb.append(", ");
      sb.append("binary_vals:");
      if (this.binary_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.binary_vals);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (is_null == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_null' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnDataStandardSchemeFactory implements SchemeFactory {
    public TColumnDataStandardScheme getScheme() {
      return new TColumnDataStandardScheme();
    }
  }

  private static class TColumnDataStandardScheme extends StandardScheme<TColumnData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.is_null = new ArrayList<Boolean>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  boolean _elem2;
                  _elem2 = iprot.readBool();
                  struct.is_null.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setIs_nullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.bool_vals = new ArrayList<Boolean>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  boolean _elem5;
                  _elem5 = iprot.readBool();
                  struct.bool_vals.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setBool_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.byte_vals = new ArrayList<Byte>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  byte _elem8;
                  _elem8 = iprot.readByte();
                  struct.byte_vals.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setByte_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHORT_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.short_vals = new ArrayList<Short>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  short _elem11;
                  _elem11 = iprot.readI16();
                  struct.short_vals.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setShort_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.int_vals = new ArrayList<Integer>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  struct.int_vals.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setInt_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LONG_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.long_vals = new ArrayList<Long>(_list15.size);
                for (int _i16 = 0; _i16 < _list15.size; ++_i16)
                {
                  long _elem17;
                  _elem17 = iprot.readI64();
                  struct.long_vals.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setLong_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.double_vals = new ArrayList<Double>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  double _elem20;
                  _elem20 = iprot.readDouble();
                  struct.double_vals.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setDouble_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRING_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.string_vals = new ArrayList<String>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  String _elem23;
                  _elem23 = iprot.readString();
                  struct.string_vals.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setString_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BINARY_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.binary_vals = new ArrayList<ByteBuffer>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  ByteBuffer _elem26;
                  _elem26 = iprot.readBinary();
                  struct.binary_vals.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setBinary_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.is_null != null) {
        oprot.writeFieldBegin(IS_NULL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.is_null.size()));
          for (boolean _iter27 : struct.is_null)
          {
            oprot.writeBool(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bool_vals != null) {
        if (struct.isSetBool_vals()) {
          oprot.writeFieldBegin(BOOL_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.bool_vals.size()));
            for (boolean _iter28 : struct.bool_vals)
            {
              oprot.writeBool(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byte_vals != null) {
        if (struct.isSetByte_vals()) {
          oprot.writeFieldBegin(BYTE_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byte_vals.size()));
            for (byte _iter29 : struct.byte_vals)
            {
              oprot.writeByte(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.short_vals != null) {
        if (struct.isSetShort_vals()) {
          oprot.writeFieldBegin(SHORT_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.short_vals.size()));
            for (short _iter30 : struct.short_vals)
            {
              oprot.writeI16(_iter30);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.int_vals != null) {
        if (struct.isSetInt_vals()) {
          oprot.writeFieldBegin(INT_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.int_vals.size()));
            for (int _iter31 : struct.int_vals)
            {
              oprot.writeI32(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.long_vals != null) {
        if (struct.isSetLong_vals()) {
          oprot.writeFieldBegin(LONG_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.long_vals.size()));
            for (long _iter32 : struct.long_vals)
            {
              oprot.writeI64(_iter32);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.double_vals != null) {
        if (struct.isSetDouble_vals()) {
          oprot.writeFieldBegin(DOUBLE_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.double_vals.size()));
            for (double _iter33 : struct.double_vals)
            {
              oprot.writeDouble(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_vals != null) {
        if (struct.isSetString_vals()) {
          oprot.writeFieldBegin(STRING_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.string_vals.size()));
            for (String _iter34 : struct.string_vals)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binary_vals != null) {
        if (struct.isSetBinary_vals()) {
          oprot.writeFieldBegin(BINARY_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binary_vals.size()));
            for (ByteBuffer _iter35 : struct.binary_vals)
            {
              oprot.writeBinary(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnDataTupleSchemeFactory implements SchemeFactory {
    public TColumnDataTupleScheme getScheme() {
      return new TColumnDataTupleScheme();
    }
  }

  private static class TColumnDataTupleScheme extends TupleScheme<TColumnData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.is_null.size());
        for (boolean _iter36 : struct.is_null)
        {
          oprot.writeBool(_iter36);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetBool_vals()) {
        optionals.set(0);
      }
      if (struct.isSetByte_vals()) {
        optionals.set(1);
      }
      if (struct.isSetShort_vals()) {
        optionals.set(2);
      }
      if (struct.isSetInt_vals()) {
        optionals.set(3);
      }
      if (struct.isSetLong_vals()) {
        optionals.set(4);
      }
      if (struct.isSetDouble_vals()) {
        optionals.set(5);
      }
      if (struct.isSetString_vals()) {
        optionals.set(6);
      }
      if (struct.isSetBinary_vals()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBool_vals()) {
        {
          oprot.writeI32(struct.bool_vals.size());
          for (boolean _iter37 : struct.bool_vals)
          {
            oprot.writeBool(_iter37);
          }
        }
      }
      if (struct.isSetByte_vals()) {
        {
          oprot.writeI32(struct.byte_vals.size());
          for (byte _iter38 : struct.byte_vals)
          {
            oprot.writeByte(_iter38);
          }
        }
      }
      if (struct.isSetShort_vals()) {
        {
          oprot.writeI32(struct.short_vals.size());
          for (short _iter39 : struct.short_vals)
          {
            oprot.writeI16(_iter39);
          }
        }
      }
      if (struct.isSetInt_vals()) {
        {
          oprot.writeI32(struct.int_vals.size());
          for (int _iter40 : struct.int_vals)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetLong_vals()) {
        {
          oprot.writeI32(struct.long_vals.size());
          for (long _iter41 : struct.long_vals)
          {
            oprot.writeI64(_iter41);
          }
        }
      }
      if (struct.isSetDouble_vals()) {
        {
          oprot.writeI32(struct.double_vals.size());
          for (double _iter42 : struct.double_vals)
          {
            oprot.writeDouble(_iter42);
          }
        }
      }
      if (struct.isSetString_vals()) {
        {
          oprot.writeI32(struct.string_vals.size());
          for (String _iter43 : struct.string_vals)
          {
            oprot.writeString(_iter43);
          }
        }
      }
      if (struct.isSetBinary_vals()) {
        {
          oprot.writeI32(struct.binary_vals.size());
          for (ByteBuffer _iter44 : struct.binary_vals)
          {
            oprot.writeBinary(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.is_null = new ArrayList<Boolean>(_list45.size);
        for (int _i46 = 0; _i46 < _list45.size; ++_i46)
        {
          boolean _elem47;
          _elem47 = iprot.readBool();
          struct.is_null.add(_elem47);
        }
      }
      struct.setIs_nullIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.bool_vals = new ArrayList<Boolean>(_list48.size);
          for (int _i49 = 0; _i49 < _list48.size; ++_i49)
          {
            boolean _elem50;
            _elem50 = iprot.readBool();
            struct.bool_vals.add(_elem50);
          }
        }
        struct.setBool_valsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_vals = new ArrayList<Byte>(_list51.size);
          for (int _i52 = 0; _i52 < _list51.size; ++_i52)
          {
            byte _elem53;
            _elem53 = iprot.readByte();
            struct.byte_vals.add(_elem53);
          }
        }
        struct.setByte_valsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.short_vals = new ArrayList<Short>(_list54.size);
          for (int _i55 = 0; _i55 < _list54.size; ++_i55)
          {
            short _elem56;
            _elem56 = iprot.readI16();
            struct.short_vals.add(_elem56);
          }
        }
        struct.setShort_valsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.int_vals = new ArrayList<Integer>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            int _elem59;
            _elem59 = iprot.readI32();
            struct.int_vals.add(_elem59);
          }
        }
        struct.setInt_valsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.long_vals = new ArrayList<Long>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            long _elem62;
            _elem62 = iprot.readI64();
            struct.long_vals.add(_elem62);
          }
        }
        struct.setLong_valsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.double_vals = new ArrayList<Double>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            double _elem65;
            _elem65 = iprot.readDouble();
            struct.double_vals.add(_elem65);
          }
        }
        struct.setDouble_valsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.string_vals = new ArrayList<String>(_list66.size);
          for (int _i67 = 0; _i67 < _list66.size; ++_i67)
          {
            String _elem68;
            _elem68 = iprot.readString();
            struct.string_vals.add(_elem68);
          }
        }
        struct.setString_valsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binary_vals = new ArrayList<ByteBuffer>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            ByteBuffer _elem71;
            _elem71 = iprot.readBinary();
            struct.binary_vals.add(_elem71);
          }
        }
        struct.setBinary_valsIsSet(true);
      }
    }
  }

}

