/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColumnValue._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnValue");

  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_val", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SMALLINT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("smallint_val", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_val", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BIGINT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bigint_val", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("double_val", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_val", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BYTE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_val", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_val", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnValueTupleSchemeFactory());
  }

  public boolean bool_val; // optional
  public short smallint_val; // optional
  public int int_val; // optional
  public long bigint_val; // optional
  public double double_val; // optional
  public String string_val; // optional
  public byte byte_val; // optional
  public ByteBuffer binary_val; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAL((short)1, "bool_val"),
    SMALLINT_VAL((short)2, "smallint_val"),
    INT_VAL((short)3, "int_val"),
    BIGINT_VAL((short)4, "bigint_val"),
    DOUBLE_VAL((short)5, "double_val"),
    STRING_VAL((short)6, "string_val"),
    BYTE_VAL((short)7, "byte_val"),
    BINARY_VAL((short)8, "binary_val");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAL
          return BOOL_VAL;
        case 2: // SMALLINT_VAL
          return SMALLINT_VAL;
        case 3: // INT_VAL
          return INT_VAL;
        case 4: // BIGINT_VAL
          return BIGINT_VAL;
        case 5: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 6: // STRING_VAL
          return STRING_VAL;
        case 7: // BYTE_VAL
          return BYTE_VAL;
        case 8: // BINARY_VAL
          return BINARY_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOL_VAL_ISSET_ID = 0;
  private static final int __SMALLINT_VAL_ISSET_ID = 1;
  private static final int __INT_VAL_ISSET_ID = 2;
  private static final int __BIGINT_VAL_ISSET_ID = 3;
  private static final int __DOUBLE_VAL_ISSET_ID = 4;
  private static final int __BYTE_VAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BOOL_VAL,_Fields.SMALLINT_VAL,_Fields.INT_VAL,_Fields.BIGINT_VAL,_Fields.DOUBLE_VAL,_Fields.STRING_VAL,_Fields.BYTE_VAL,_Fields.BINARY_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("bool_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SMALLINT_VAL, new org.apache.thrift.meta_data.FieldMetaData("smallint_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("int_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIGINT_VAL, new org.apache.thrift.meta_data.FieldMetaData("bigint_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("double_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("string_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTE_VAL, new org.apache.thrift.meta_data.FieldMetaData("byte_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BINARY_VAL, new org.apache.thrift.meta_data.FieldMetaData("binary_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnValue.class, metaDataMap);
  }

  public TColumnValue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnValue(TColumnValue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bool_val = other.bool_val;
    this.smallint_val = other.smallint_val;
    this.int_val = other.int_val;
    this.bigint_val = other.bigint_val;
    this.double_val = other.double_val;
    if (other.isSetString_val()) {
      this.string_val = other.string_val;
    }
    this.byte_val = other.byte_val;
    if (other.isSetBinary_val()) {
      this.binary_val = org.apache.thrift.TBaseHelper.copyBinary(other.binary_val);
;
    }
  }

  public TColumnValue deepCopy() {
    return new TColumnValue(this);
  }

  @Override
  public void clear() {
    setBool_valIsSet(false);
    this.bool_val = false;
    setSmallint_valIsSet(false);
    this.smallint_val = 0;
    setInt_valIsSet(false);
    this.int_val = 0;
    setBigint_valIsSet(false);
    this.bigint_val = 0;
    setDouble_valIsSet(false);
    this.double_val = 0.0;
    this.string_val = null;
    setByte_valIsSet(false);
    this.byte_val = 0;
    this.binary_val = null;
  }

  public boolean isBool_val() {
    return this.bool_val;
  }

  public TColumnValue setBool_val(boolean bool_val) {
    this.bool_val = bool_val;
    setBool_valIsSet(true);
    return this;
  }

  public void unsetBool_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  /** Returns true if field bool_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  public void setBool_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_VAL_ISSET_ID, value);
  }

  public short getSmallint_val() {
    return this.smallint_val;
  }

  public TColumnValue setSmallint_val(short smallint_val) {
    this.smallint_val = smallint_val;
    setSmallint_valIsSet(true);
    return this;
  }

  public void unsetSmallint_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMALLINT_VAL_ISSET_ID);
  }

  /** Returns true if field smallint_val is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallint_val() {
    return EncodingUtils.testBit(__isset_bitfield, __SMALLINT_VAL_ISSET_ID);
  }

  public void setSmallint_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMALLINT_VAL_ISSET_ID, value);
  }

  public int getInt_val() {
    return this.int_val;
  }

  public TColumnValue setInt_val(int int_val) {
    this.int_val = int_val;
    setInt_valIsSet(true);
    return this;
  }

  public void unsetInt_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VAL_ISSET_ID);
  }

  /** Returns true if field int_val is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_val() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VAL_ISSET_ID);
  }

  public void setInt_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VAL_ISSET_ID, value);
  }

  public long getBigint_val() {
    return this.bigint_val;
  }

  public TColumnValue setBigint_val(long bigint_val) {
    this.bigint_val = bigint_val;
    setBigint_valIsSet(true);
    return this;
  }

  public void unsetBigint_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGINT_VAL_ISSET_ID);
  }

  /** Returns true if field bigint_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBigint_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGINT_VAL_ISSET_ID);
  }

  public void setBigint_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGINT_VAL_ISSET_ID, value);
  }

  public double getDouble_val() {
    return this.double_val;
  }

  public TColumnValue setDouble_val(double double_val) {
    this.double_val = double_val;
    setDouble_valIsSet(true);
    return this;
  }

  public void unsetDouble_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  /** Returns true if field double_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_val() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  public void setDouble_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID, value);
  }

  public String getString_val() {
    return this.string_val;
  }

  public TColumnValue setString_val(String string_val) {
    this.string_val = string_val;
    return this;
  }

  public void unsetString_val() {
    this.string_val = null;
  }

  /** Returns true if field string_val is set (has been assigned a value) and false otherwise */
  public boolean isSetString_val() {
    return this.string_val != null;
  }

  public void setString_valIsSet(boolean value) {
    if (!value) {
      this.string_val = null;
    }
  }

  public byte getByte_val() {
    return this.byte_val;
  }

  public TColumnValue setByte_val(byte byte_val) {
    this.byte_val = byte_val;
    setByte_valIsSet(true);
    return this;
  }

  public void unsetByte_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTE_VAL_ISSET_ID);
  }

  /** Returns true if field byte_val is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTE_VAL_ISSET_ID);
  }

  public void setByte_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTE_VAL_ISSET_ID, value);
  }

  public byte[] getBinary_val() {
    setBinary_val(org.apache.thrift.TBaseHelper.rightSize(binary_val));
    return binary_val == null ? null : binary_val.array();
  }

  public ByteBuffer bufferForBinary_val() {
    return binary_val;
  }

  public TColumnValue setBinary_val(byte[] binary_val) {
    setBinary_val(binary_val == null ? (ByteBuffer)null : ByteBuffer.wrap(binary_val));
    return this;
  }

  public TColumnValue setBinary_val(ByteBuffer binary_val) {
    this.binary_val = binary_val;
    return this;
  }

  public void unsetBinary_val() {
    this.binary_val = null;
  }

  /** Returns true if field binary_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_val() {
    return this.binary_val != null;
  }

  public void setBinary_valIsSet(boolean value) {
    if (!value) {
      this.binary_val = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_VAL:
      if (value == null) {
        unsetBool_val();
      } else {
        setBool_val((Boolean)value);
      }
      break;

    case SMALLINT_VAL:
      if (value == null) {
        unsetSmallint_val();
      } else {
        setSmallint_val((Short)value);
      }
      break;

    case INT_VAL:
      if (value == null) {
        unsetInt_val();
      } else {
        setInt_val((Integer)value);
      }
      break;

    case BIGINT_VAL:
      if (value == null) {
        unsetBigint_val();
      } else {
        setBigint_val((Long)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDouble_val();
      } else {
        setDouble_val((Double)value);
      }
      break;

    case STRING_VAL:
      if (value == null) {
        unsetString_val();
      } else {
        setString_val((String)value);
      }
      break;

    case BYTE_VAL:
      if (value == null) {
        unsetByte_val();
      } else {
        setByte_val((Byte)value);
      }
      break;

    case BINARY_VAL:
      if (value == null) {
        unsetBinary_val();
      } else {
        setBinary_val((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_VAL:
      return Boolean.valueOf(isBool_val());

    case SMALLINT_VAL:
      return Short.valueOf(getSmallint_val());

    case INT_VAL:
      return Integer.valueOf(getInt_val());

    case BIGINT_VAL:
      return Long.valueOf(getBigint_val());

    case DOUBLE_VAL:
      return Double.valueOf(getDouble_val());

    case STRING_VAL:
      return getString_val();

    case BYTE_VAL:
      return Byte.valueOf(getByte_val());

    case BINARY_VAL:
      return getBinary_val();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_VAL:
      return isSetBool_val();
    case SMALLINT_VAL:
      return isSetSmallint_val();
    case INT_VAL:
      return isSetInt_val();
    case BIGINT_VAL:
      return isSetBigint_val();
    case DOUBLE_VAL:
      return isSetDouble_val();
    case STRING_VAL:
      return isSetString_val();
    case BYTE_VAL:
      return isSetByte_val();
    case BINARY_VAL:
      return isSetBinary_val();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnValue)
      return this.equals((TColumnValue)that);
    return false;
  }

  public boolean equals(TColumnValue that) {
    if (that == null)
      return false;

    boolean this_present_bool_val = true && this.isSetBool_val();
    boolean that_present_bool_val = true && that.isSetBool_val();
    if (this_present_bool_val || that_present_bool_val) {
      if (!(this_present_bool_val && that_present_bool_val))
        return false;
      if (this.bool_val != that.bool_val)
        return false;
    }

    boolean this_present_smallint_val = true && this.isSetSmallint_val();
    boolean that_present_smallint_val = true && that.isSetSmallint_val();
    if (this_present_smallint_val || that_present_smallint_val) {
      if (!(this_present_smallint_val && that_present_smallint_val))
        return false;
      if (this.smallint_val != that.smallint_val)
        return false;
    }

    boolean this_present_int_val = true && this.isSetInt_val();
    boolean that_present_int_val = true && that.isSetInt_val();
    if (this_present_int_val || that_present_int_val) {
      if (!(this_present_int_val && that_present_int_val))
        return false;
      if (this.int_val != that.int_val)
        return false;
    }

    boolean this_present_bigint_val = true && this.isSetBigint_val();
    boolean that_present_bigint_val = true && that.isSetBigint_val();
    if (this_present_bigint_val || that_present_bigint_val) {
      if (!(this_present_bigint_val && that_present_bigint_val))
        return false;
      if (this.bigint_val != that.bigint_val)
        return false;
    }

    boolean this_present_double_val = true && this.isSetDouble_val();
    boolean that_present_double_val = true && that.isSetDouble_val();
    if (this_present_double_val || that_present_double_val) {
      if (!(this_present_double_val && that_present_double_val))
        return false;
      if (this.double_val != that.double_val)
        return false;
    }

    boolean this_present_string_val = true && this.isSetString_val();
    boolean that_present_string_val = true && that.isSetString_val();
    if (this_present_string_val || that_present_string_val) {
      if (!(this_present_string_val && that_present_string_val))
        return false;
      if (!this.string_val.equals(that.string_val))
        return false;
    }

    boolean this_present_byte_val = true && this.isSetByte_val();
    boolean that_present_byte_val = true && that.isSetByte_val();
    if (this_present_byte_val || that_present_byte_val) {
      if (!(this_present_byte_val && that_present_byte_val))
        return false;
      if (this.byte_val != that.byte_val)
        return false;
    }

    boolean this_present_binary_val = true && this.isSetBinary_val();
    boolean that_present_binary_val = true && that.isSetBinary_val();
    if (this_present_binary_val || that_present_binary_val) {
      if (!(this_present_binary_val && that_present_binary_val))
        return false;
      if (!this.binary_val.equals(that.binary_val))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TColumnValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBool_val()).compareTo(other.isSetBool_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_val, other.bool_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallint_val()).compareTo(other.isSetSmallint_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallint_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallint_val, other.smallint_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_val()).compareTo(other.isSetInt_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_val, other.int_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigint_val()).compareTo(other.isSetBigint_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigint_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigint_val, other.bigint_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_val()).compareTo(other.isSetDouble_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_val, other.double_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_val()).compareTo(other.isSetString_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_val, other.string_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_val()).compareTo(other.isSetByte_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_val, other.byte_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_val()).compareTo(other.isSetBinary_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_val, other.binary_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumnValue(");
    boolean first = true;

    if (isSetBool_val()) {
      sb.append("bool_val:");
      sb.append(this.bool_val);
      first = false;
    }
    if (isSetSmallint_val()) {
      if (!first) sb.append(", ");
      sb.append("smallint_val:");
      sb.append(this.smallint_val);
      first = false;
    }
    if (isSetInt_val()) {
      if (!first) sb.append(", ");
      sb.append("int_val:");
      sb.append(this.int_val);
      first = false;
    }
    if (isSetBigint_val()) {
      if (!first) sb.append(", ");
      sb.append("bigint_val:");
      sb.append(this.bigint_val);
      first = false;
    }
    if (isSetDouble_val()) {
      if (!first) sb.append(", ");
      sb.append("double_val:");
      sb.append(this.double_val);
      first = false;
    }
    if (isSetString_val()) {
      if (!first) sb.append(", ");
      sb.append("string_val:");
      if (this.string_val == null) {
        sb.append("null");
      } else {
        sb.append(this.string_val);
      }
      first = false;
    }
    if (isSetByte_val()) {
      if (!first) sb.append(", ");
      sb.append("byte_val:");
      sb.append(this.byte_val);
      first = false;
    }
    if (isSetBinary_val()) {
      if (!first) sb.append(", ");
      sb.append("binary_val:");
      if (this.binary_val == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binary_val, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnValueStandardSchemeFactory implements SchemeFactory {
    public TColumnValueStandardScheme getScheme() {
      return new TColumnValueStandardScheme();
    }
  }

  private static class TColumnValueStandardScheme extends StandardScheme<TColumnValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_val = iprot.readBool();
              struct.setBool_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SMALLINT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.smallint_val = iprot.readI16();
              struct.setSmallint_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int_val = iprot.readI32();
              struct.setInt_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIGINT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bigint_val = iprot.readI64();
              struct.setBigint_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_val = iprot.readDouble();
              struct.setDouble_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRING_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_val = iprot.readString();
              struct.setString_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BYTE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byte_val = iprot.readByte();
              struct.setByte_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_val = iprot.readBinary();
              struct.setBinary_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBool_val()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(struct.bool_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmallint_val()) {
        oprot.writeFieldBegin(SMALLINT_VAL_FIELD_DESC);
        oprot.writeI16(struct.smallint_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt_val()) {
        oprot.writeFieldBegin(INT_VAL_FIELD_DESC);
        oprot.writeI32(struct.int_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBigint_val()) {
        oprot.writeFieldBegin(BIGINT_VAL_FIELD_DESC);
        oprot.writeI64(struct.bigint_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDouble_val()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.double_val);
        oprot.writeFieldEnd();
      }
      if (struct.string_val != null) {
        if (struct.isSetString_val()) {
          oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
          oprot.writeString(struct.string_val);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetByte_val()) {
        oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
        oprot.writeByte(struct.byte_val);
        oprot.writeFieldEnd();
      }
      if (struct.binary_val != null) {
        if (struct.isSetBinary_val()) {
          oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
          oprot.writeBinary(struct.binary_val);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnValueTupleSchemeFactory implements SchemeFactory {
    public TColumnValueTupleScheme getScheme() {
      return new TColumnValueTupleScheme();
    }
  }

  private static class TColumnValueTupleScheme extends TupleScheme<TColumnValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBool_val()) {
        optionals.set(0);
      }
      if (struct.isSetSmallint_val()) {
        optionals.set(1);
      }
      if (struct.isSetInt_val()) {
        optionals.set(2);
      }
      if (struct.isSetBigint_val()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_val()) {
        optionals.set(4);
      }
      if (struct.isSetString_val()) {
        optionals.set(5);
      }
      if (struct.isSetByte_val()) {
        optionals.set(6);
      }
      if (struct.isSetBinary_val()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBool_val()) {
        oprot.writeBool(struct.bool_val);
      }
      if (struct.isSetSmallint_val()) {
        oprot.writeI16(struct.smallint_val);
      }
      if (struct.isSetInt_val()) {
        oprot.writeI32(struct.int_val);
      }
      if (struct.isSetBigint_val()) {
        oprot.writeI64(struct.bigint_val);
      }
      if (struct.isSetDouble_val()) {
        oprot.writeDouble(struct.double_val);
      }
      if (struct.isSetString_val()) {
        oprot.writeString(struct.string_val);
      }
      if (struct.isSetByte_val()) {
        oprot.writeByte(struct.byte_val);
      }
      if (struct.isSetBinary_val()) {
        oprot.writeBinary(struct.binary_val);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.bool_val = iprot.readBool();
        struct.setBool_valIsSet(true);
      }
      if (incoming.get(1)) {
        struct.smallint_val = iprot.readI16();
        struct.setSmallint_valIsSet(true);
      }
      if (incoming.get(2)) {
        struct.int_val = iprot.readI32();
        struct.setInt_valIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bigint_val = iprot.readI64();
        struct.setBigint_valIsSet(true);
      }
      if (incoming.get(4)) {
        struct.double_val = iprot.readDouble();
        struct.setDouble_valIsSet(true);
      }
      if (incoming.get(5)) {
        struct.string_val = iprot.readString();
        struct.setString_valIsSet(true);
      }
      if (incoming.get(6)) {
        struct.byte_val = iprot.readByte();
        struct.setByte_valIsSet(true);
      }
      if (incoming.get(7)) {
        struct.binary_val = iprot.readBinary();
        struct.setBinary_valIsSet(true);
      }
    }
  }

}

