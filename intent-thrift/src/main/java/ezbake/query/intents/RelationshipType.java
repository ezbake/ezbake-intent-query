/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.intents;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum RelationshipType implements org.apache.thrift.TEnum {
  IN_COMMAND_OF(0),
  IS_SUBORDINATE_TO(1),
  SISTER_AIRFIELD(2),
  DEPLOYS_WITH(3),
  TRAINS_WITH(4),
  WORKS_WITH(5),
  TRANSMITS_TO(6),
  RECEIVES_FROM(7),
  DEPLOYS_FROM(8),
  DEPLOYS_FROM_HERE(9),
  DEPLOYS_TO(10),
  DEPLOYS_TO_HERE(11),
  GARRISONED_AT(12),
  GARRISONED_HERE(13),
  HOMEPORTED_AT(14),
  HOMEPORTED_HERE(15),
  PATROLS_AREA(16),
  PATROLLED_BY(17),
  TRAINS_AT(18),
  TRAINS_HERE(19),
  LOCATED_NEAR(20),
  LOCATED_NEARBY(21),
  COMPONENT_OF(22),
  COMPONENTS_INCLUDE(23),
  USES(24),
  USED_BY(25),
  IS_USED_IN(26),
  IS_USED_FOR(27),
  TESTED_AT(28),
  TESTED_HERE(29),
  REPAIRED_AT(30),
  REPAIRED_HERE(31),
  AFFECTS(32),
  REACTS_TO(33),
  ATTENDS(34),
  ATTENDED_BY(35),
  PARTICIPATES_IN(36),
  PARTICIPANTS(37),
  SUPPORTS(38),
  SUPPORTED_BY(39);

  private final int value;

  private RelationshipType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static RelationshipType findByValue(int value) { 
    switch (value) {
      case 0:
        return IN_COMMAND_OF;
      case 1:
        return IS_SUBORDINATE_TO;
      case 2:
        return SISTER_AIRFIELD;
      case 3:
        return DEPLOYS_WITH;
      case 4:
        return TRAINS_WITH;
      case 5:
        return WORKS_WITH;
      case 6:
        return TRANSMITS_TO;
      case 7:
        return RECEIVES_FROM;
      case 8:
        return DEPLOYS_FROM;
      case 9:
        return DEPLOYS_FROM_HERE;
      case 10:
        return DEPLOYS_TO;
      case 11:
        return DEPLOYS_TO_HERE;
      case 12:
        return GARRISONED_AT;
      case 13:
        return GARRISONED_HERE;
      case 14:
        return HOMEPORTED_AT;
      case 15:
        return HOMEPORTED_HERE;
      case 16:
        return PATROLS_AREA;
      case 17:
        return PATROLLED_BY;
      case 18:
        return TRAINS_AT;
      case 19:
        return TRAINS_HERE;
      case 20:
        return LOCATED_NEAR;
      case 21:
        return LOCATED_NEARBY;
      case 22:
        return COMPONENT_OF;
      case 23:
        return COMPONENTS_INCLUDE;
      case 24:
        return USES;
      case 25:
        return USED_BY;
      case 26:
        return IS_USED_IN;
      case 27:
        return IS_USED_FOR;
      case 28:
        return TESTED_AT;
      case 29:
        return TESTED_HERE;
      case 30:
        return REPAIRED_AT;
      case 31:
        return REPAIRED_HERE;
      case 32:
        return AFFECTS;
      case 33:
        return REACTS_TO;
      case 34:
        return ATTENDS;
      case 35:
        return ATTENDED_BY;
      case 36:
        return PARTICIPATES_IN;
      case 37:
        return PARTICIPANTS;
      case 38:
        return SUPPORTS;
      case 39:
        return SUPPORTED_BY;
      default:
        return null;
    }
  }
}
