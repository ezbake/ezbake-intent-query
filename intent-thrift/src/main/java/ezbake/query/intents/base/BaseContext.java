/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.intents.base;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseContext implements org.apache.thrift.TBase<BaseContext, BaseContext._Fields>, java.io.Serializable, Cloneable, Comparable<BaseContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseContext");

  private static final org.apache.thrift.protocol.TField OBJECT_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectUUID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField START_END_FIELD_DESC = new org.apache.thrift.protocol.TField("startEnd", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseContextTupleSchemeFactory());
  }

  public String objectUUID; // required
  public SecurityLabel security; // required
  public TemporalRange startEnd; // optional
  public String dataSource; // optional
  public String confidence; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBJECT_UUID((short)1, "objectUUID"),
    SECURITY((short)2, "security"),
    START_END((short)3, "startEnd"),
    DATA_SOURCE((short)4, "dataSource"),
    CONFIDENCE((short)5, "confidence");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBJECT_UUID
          return OBJECT_UUID;
        case 2: // SECURITY
          return SECURITY;
        case 3: // START_END
          return START_END;
        case 4: // DATA_SOURCE
          return DATA_SOURCE;
        case 5: // CONFIDENCE
          return CONFIDENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.START_END,_Fields.DATA_SOURCE,_Fields.CONFIDENCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBJECT_UUID, new org.apache.thrift.meta_data.FieldMetaData("objectUUID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityLabel.class)));
    tmpMap.put(_Fields.START_END, new org.apache.thrift.meta_data.FieldMetaData("startEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemporalRange.class)));
    tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dataSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseContext.class, metaDataMap);
  }

  public BaseContext() {
  }

  public BaseContext(
    String objectUUID,
    SecurityLabel security)
  {
    this();
    this.objectUUID = objectUUID;
    this.security = security;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseContext(BaseContext other) {
    if (other.isSetObjectUUID()) {
      this.objectUUID = other.objectUUID;
    }
    if (other.isSetSecurity()) {
      this.security = new SecurityLabel(other.security);
    }
    if (other.isSetStartEnd()) {
      this.startEnd = new TemporalRange(other.startEnd);
    }
    if (other.isSetDataSource()) {
      this.dataSource = other.dataSource;
    }
    if (other.isSetConfidence()) {
      this.confidence = other.confidence;
    }
  }

  public BaseContext deepCopy() {
    return new BaseContext(this);
  }

  @Override
  public void clear() {
    this.objectUUID = null;
    this.security = null;
    this.startEnd = null;
    this.dataSource = null;
    this.confidence = null;
  }

  public String getObjectUUID() {
    return this.objectUUID;
  }

  public BaseContext setObjectUUID(String objectUUID) {
    this.objectUUID = objectUUID;
    return this;
  }

  public void unsetObjectUUID() {
    this.objectUUID = null;
  }

  /** Returns true if field objectUUID is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectUUID() {
    return this.objectUUID != null;
  }

  public void setObjectUUIDIsSet(boolean value) {
    if (!value) {
      this.objectUUID = null;
    }
  }

  public SecurityLabel getSecurity() {
    return this.security;
  }

  public BaseContext setSecurity(SecurityLabel security) {
    this.security = security;
    return this;
  }

  public void unsetSecurity() {
    this.security = null;
  }

  /** Returns true if field security is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurity() {
    return this.security != null;
  }

  public void setSecurityIsSet(boolean value) {
    if (!value) {
      this.security = null;
    }
  }

  public TemporalRange getStartEnd() {
    return this.startEnd;
  }

  public BaseContext setStartEnd(TemporalRange startEnd) {
    this.startEnd = startEnd;
    return this;
  }

  public void unsetStartEnd() {
    this.startEnd = null;
  }

  /** Returns true if field startEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetStartEnd() {
    return this.startEnd != null;
  }

  public void setStartEndIsSet(boolean value) {
    if (!value) {
      this.startEnd = null;
    }
  }

  public String getDataSource() {
    return this.dataSource;
  }

  public BaseContext setDataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  public void unsetDataSource() {
    this.dataSource = null;
  }

  /** Returns true if field dataSource is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSource() {
    return this.dataSource != null;
  }

  public void setDataSourceIsSet(boolean value) {
    if (!value) {
      this.dataSource = null;
    }
  }

  public String getConfidence() {
    return this.confidence;
  }

  public BaseContext setConfidence(String confidence) {
    this.confidence = confidence;
    return this;
  }

  public void unsetConfidence() {
    this.confidence = null;
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return this.confidence != null;
  }

  public void setConfidenceIsSet(boolean value) {
    if (!value) {
      this.confidence = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OBJECT_UUID:
      if (value == null) {
        unsetObjectUUID();
      } else {
        setObjectUUID((String)value);
      }
      break;

    case SECURITY:
      if (value == null) {
        unsetSecurity();
      } else {
        setSecurity((SecurityLabel)value);
      }
      break;

    case START_END:
      if (value == null) {
        unsetStartEnd();
      } else {
        setStartEnd((TemporalRange)value);
      }
      break;

    case DATA_SOURCE:
      if (value == null) {
        unsetDataSource();
      } else {
        setDataSource((String)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OBJECT_UUID:
      return getObjectUUID();

    case SECURITY:
      return getSecurity();

    case START_END:
      return getStartEnd();

    case DATA_SOURCE:
      return getDataSource();

    case CONFIDENCE:
      return getConfidence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OBJECT_UUID:
      return isSetObjectUUID();
    case SECURITY:
      return isSetSecurity();
    case START_END:
      return isSetStartEnd();
    case DATA_SOURCE:
      return isSetDataSource();
    case CONFIDENCE:
      return isSetConfidence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseContext)
      return this.equals((BaseContext)that);
    return false;
  }

  public boolean equals(BaseContext that) {
    if (that == null)
      return false;

    boolean this_present_objectUUID = true && this.isSetObjectUUID();
    boolean that_present_objectUUID = true && that.isSetObjectUUID();
    if (this_present_objectUUID || that_present_objectUUID) {
      if (!(this_present_objectUUID && that_present_objectUUID))
        return false;
      if (!this.objectUUID.equals(that.objectUUID))
        return false;
    }

    boolean this_present_security = true && this.isSetSecurity();
    boolean that_present_security = true && that.isSetSecurity();
    if (this_present_security || that_present_security) {
      if (!(this_present_security && that_present_security))
        return false;
      if (!this.security.equals(that.security))
        return false;
    }

    boolean this_present_startEnd = true && this.isSetStartEnd();
    boolean that_present_startEnd = true && that.isSetStartEnd();
    if (this_present_startEnd || that_present_startEnd) {
      if (!(this_present_startEnd && that_present_startEnd))
        return false;
      if (!this.startEnd.equals(that.startEnd))
        return false;
    }

    boolean this_present_dataSource = true && this.isSetDataSource();
    boolean that_present_dataSource = true && that.isSetDataSource();
    if (this_present_dataSource || that_present_dataSource) {
      if (!(this_present_dataSource && that_present_dataSource))
        return false;
      if (!this.dataSource.equals(that.dataSource))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (!this.confidence.equals(that.confidence))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BaseContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetObjectUUID()).compareTo(other.isSetObjectUUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectUUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectUUID, other.objectUUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartEnd()).compareTo(other.isSetStartEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startEnd, other.startEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataSource()).compareTo(other.isSetDataSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSource, other.dataSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseContext(");
    boolean first = true;

    sb.append("objectUUID:");
    if (this.objectUUID == null) {
      sb.append("null");
    } else {
      sb.append(this.objectUUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("security:");
    if (this.security == null) {
      sb.append("null");
    } else {
      sb.append(this.security);
    }
    first = false;
    if (isSetStartEnd()) {
      if (!first) sb.append(", ");
      sb.append("startEnd:");
      if (this.startEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.startEnd);
      }
      first = false;
    }
    if (isSetDataSource()) {
      if (!first) sb.append(", ");
      sb.append("dataSource:");
      if (this.dataSource == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSource);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      if (this.confidence == null) {
        sb.append("null");
      } else {
        sb.append(this.confidence);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (objectUUID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'objectUUID' was not present! Struct: " + toString());
    }
    if (security == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'security' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (security != null) {
      security.validate();
    }
    if (startEnd != null) {
      startEnd.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseContextStandardSchemeFactory implements SchemeFactory {
    public BaseContextStandardScheme getScheme() {
      return new BaseContextStandardScheme();
    }
  }

  private static class BaseContextStandardScheme extends StandardScheme<BaseContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBJECT_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectUUID = iprot.readString();
              struct.setObjectUUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECURITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.security = new SecurityLabel();
              struct.security.read(iprot);
              struct.setSecurityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startEnd = new TemporalRange();
              struct.startEnd.read(iprot);
              struct.setStartEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataSource = iprot.readString();
              struct.setDataSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confidence = iprot.readString();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.objectUUID != null) {
        oprot.writeFieldBegin(OBJECT_UUID_FIELD_DESC);
        oprot.writeString(struct.objectUUID);
        oprot.writeFieldEnd();
      }
      if (struct.security != null) {
        oprot.writeFieldBegin(SECURITY_FIELD_DESC);
        struct.security.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.startEnd != null) {
        if (struct.isSetStartEnd()) {
          oprot.writeFieldBegin(START_END_FIELD_DESC);
          struct.startEnd.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataSource != null) {
        if (struct.isSetDataSource()) {
          oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
          oprot.writeString(struct.dataSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confidence != null) {
        if (struct.isSetConfidence()) {
          oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
          oprot.writeString(struct.confidence);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseContextTupleSchemeFactory implements SchemeFactory {
    public BaseContextTupleScheme getScheme() {
      return new BaseContextTupleScheme();
    }
  }

  private static class BaseContextTupleScheme extends TupleScheme<BaseContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.objectUUID);
      struct.security.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetStartEnd()) {
        optionals.set(0);
      }
      if (struct.isSetDataSource()) {
        optionals.set(1);
      }
      if (struct.isSetConfidence()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStartEnd()) {
        struct.startEnd.write(oprot);
      }
      if (struct.isSetDataSource()) {
        oprot.writeString(struct.dataSource);
      }
      if (struct.isSetConfidence()) {
        oprot.writeString(struct.confidence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.objectUUID = iprot.readString();
      struct.setObjectUUIDIsSet(true);
      struct.security = new SecurityLabel();
      struct.security.read(iprot);
      struct.setSecurityIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.startEnd = new TemporalRange();
        struct.startEnd.read(iprot);
        struct.setStartEndIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataSource = iprot.readString();
        struct.setDataSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.confidence = iprot.readString();
        struct.setConfidenceIsSet(true);
      }
    }
  }

}

