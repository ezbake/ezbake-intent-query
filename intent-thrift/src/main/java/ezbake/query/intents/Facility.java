/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.intents;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Facility implements org.apache.thrift.TBase<Facility, Facility._Fields>, java.io.Serializable, Cloneable, Comparable<Facility> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Facility");

  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BENUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("BENumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COORDINATES_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinates", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacilityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacilityTupleSchemeFactory());
  }

  public ezbake.query.intents.base.StandardObject base; // required
  public String name; // optional
  public String BENumber; // optional
  public String type; // optional
  public List<ezbake.base.thrift.Coordinate> coordinates; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE((short)1, "base"),
    NAME((short)2, "name"),
    BENUMBER((short)3, "BENumber"),
    TYPE((short)4, "type"),
    COORDINATES((short)5, "coordinates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE
          return BASE;
        case 2: // NAME
          return NAME;
        case 3: // BENUMBER
          return BENUMBER;
        case 4: // TYPE
          return TYPE;
        case 5: // COORDINATES
          return COORDINATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NAME,_Fields.BENUMBER,_Fields.TYPE,_Fields.COORDINATES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.base.StandardObject.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BENUMBER, new org.apache.thrift.meta_data.FieldMetaData("BENumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATES, new org.apache.thrift.meta_data.FieldMetaData("coordinates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Coordinate"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Facility.class, metaDataMap);
  }

  public Facility() {
  }

  public Facility(
    ezbake.query.intents.base.StandardObject base)
  {
    this();
    this.base = base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Facility(Facility other) {
    if (other.isSetBase()) {
      this.base = new ezbake.query.intents.base.StandardObject(other.base);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBENumber()) {
      this.BENumber = other.BENumber;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetCoordinates()) {
      List<ezbake.base.thrift.Coordinate> __this__coordinates = new ArrayList<ezbake.base.thrift.Coordinate>(other.coordinates.size());
      for (ezbake.base.thrift.Coordinate other_element : other.coordinates) {
        __this__coordinates.add(other_element);
      }
      this.coordinates = __this__coordinates;
    }
  }

  public Facility deepCopy() {
    return new Facility(this);
  }

  @Override
  public void clear() {
    this.base = null;
    this.name = null;
    this.BENumber = null;
    this.type = null;
    this.coordinates = null;
  }

  public ezbake.query.intents.base.StandardObject getBase() {
    return this.base;
  }

  public Facility setBase(ezbake.query.intents.base.StandardObject base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Facility setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getBENumber() {
    return this.BENumber;
  }

  public Facility setBENumber(String BENumber) {
    this.BENumber = BENumber;
    return this;
  }

  public void unsetBENumber() {
    this.BENumber = null;
  }

  /** Returns true if field BENumber is set (has been assigned a value) and false otherwise */
  public boolean isSetBENumber() {
    return this.BENumber != null;
  }

  public void setBENumberIsSet(boolean value) {
    if (!value) {
      this.BENumber = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public Facility setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCoordinatesSize() {
    return (this.coordinates == null) ? 0 : this.coordinates.size();
  }

  public java.util.Iterator<ezbake.base.thrift.Coordinate> getCoordinatesIterator() {
    return (this.coordinates == null) ? null : this.coordinates.iterator();
  }

  public void addToCoordinates(ezbake.base.thrift.Coordinate elem) {
    if (this.coordinates == null) {
      this.coordinates = new ArrayList<ezbake.base.thrift.Coordinate>();
    }
    this.coordinates.add(elem);
  }

  public List<ezbake.base.thrift.Coordinate> getCoordinates() {
    return this.coordinates;
  }

  public Facility setCoordinates(List<ezbake.base.thrift.Coordinate> coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  public void unsetCoordinates() {
    this.coordinates = null;
  }

  /** Returns true if field coordinates is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinates() {
    return this.coordinates != null;
  }

  public void setCoordinatesIsSet(boolean value) {
    if (!value) {
      this.coordinates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((ezbake.query.intents.base.StandardObject)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BENUMBER:
      if (value == null) {
        unsetBENumber();
      } else {
        setBENumber((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case COORDINATES:
      if (value == null) {
        unsetCoordinates();
      } else {
        setCoordinates((List<ezbake.base.thrift.Coordinate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE:
      return getBase();

    case NAME:
      return getName();

    case BENUMBER:
      return getBENumber();

    case TYPE:
      return getType();

    case COORDINATES:
      return getCoordinates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE:
      return isSetBase();
    case NAME:
      return isSetName();
    case BENUMBER:
      return isSetBENumber();
    case TYPE:
      return isSetType();
    case COORDINATES:
      return isSetCoordinates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Facility)
      return this.equals((Facility)that);
    return false;
  }

  public boolean equals(Facility that) {
    if (that == null)
      return false;

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_BENumber = true && this.isSetBENumber();
    boolean that_present_BENumber = true && that.isSetBENumber();
    if (this_present_BENumber || that_present_BENumber) {
      if (!(this_present_BENumber && that_present_BENumber))
        return false;
      if (!this.BENumber.equals(that.BENumber))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_coordinates = true && this.isSetCoordinates();
    boolean that_present_coordinates = true && that.isSetCoordinates();
    if (this_present_coordinates || that_present_coordinates) {
      if (!(this_present_coordinates && that_present_coordinates))
        return false;
      if (!this.coordinates.equals(that.coordinates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Facility other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBENumber()).compareTo(other.isSetBENumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBENumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BENumber, other.BENumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinates()).compareTo(other.isSetCoordinates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinates, other.coordinates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Facility(");
    boolean first = true;

    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetBENumber()) {
      if (!first) sb.append(", ");
      sb.append("BENumber:");
      if (this.BENumber == null) {
        sb.append("null");
      } else {
        sb.append(this.BENumber);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetCoordinates()) {
      if (!first) sb.append(", ");
      sb.append("coordinates:");
      if (this.coordinates == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinates);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacilityStandardSchemeFactory implements SchemeFactory {
    public FacilityStandardScheme getScheme() {
      return new FacilityStandardScheme();
    }
  }

  private static class FacilityStandardScheme extends StandardScheme<Facility> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Facility struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new ezbake.query.intents.base.StandardObject();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BENUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BENumber = iprot.readString();
              struct.setBENumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORDINATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.coordinates = new ArrayList<ezbake.base.thrift.Coordinate>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ezbake.base.thrift.Coordinate _elem2;
                  _elem2 = new ezbake.base.thrift.Coordinate();
                  _elem2.read(iprot);
                  struct.coordinates.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCoordinatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Facility struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.BENumber != null) {
        if (struct.isSetBENumber()) {
          oprot.writeFieldBegin(BENUMBER_FIELD_DESC);
          oprot.writeString(struct.BENumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinates != null) {
        if (struct.isSetCoordinates()) {
          oprot.writeFieldBegin(COORDINATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.coordinates.size()));
            for (ezbake.base.thrift.Coordinate _iter3 : struct.coordinates)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacilityTupleSchemeFactory implements SchemeFactory {
    public FacilityTupleScheme getScheme() {
      return new FacilityTupleScheme();
    }
  }

  private static class FacilityTupleScheme extends TupleScheme<Facility> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Facility struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.base.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetBENumber()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetCoordinates()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetBENumber()) {
        oprot.writeString(struct.BENumber);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetCoordinates()) {
        {
          oprot.writeI32(struct.coordinates.size());
          for (ezbake.base.thrift.Coordinate _iter4 : struct.coordinates)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Facility struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.base = new ezbake.query.intents.base.StandardObject();
      struct.base.read(iprot);
      struct.setBaseIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.BENumber = iprot.readString();
        struct.setBENumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.coordinates = new ArrayList<ezbake.base.thrift.Coordinate>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ezbake.base.thrift.Coordinate _elem7;
            _elem7 = new ezbake.base.thrift.Coordinate();
            _elem7.read(iprot);
            struct.coordinates.add(_elem7);
          }
        }
        struct.setCoordinatesIsSet(true);
      }
    }
  }

}

