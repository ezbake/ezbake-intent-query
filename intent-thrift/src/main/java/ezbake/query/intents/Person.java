/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.intents;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable, Comparable<Person> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MIDDLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middleName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALIASES_FIELD_DESC = new org.apache.thrift.protocol.TField("aliases", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TKB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tkbId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TIDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tideId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BIRTH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDate", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PersonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PersonTupleSchemeFactory());
  }

  public ezbake.query.intents.base.StandardObject base; // required
  public String firstName; // optional
  public String middleName; // optional
  public String lastName; // optional
  public List<String> aliases; // optional
  public String country; // optional
  public String type; // optional
  public String tkbId; // optional
  public String tideId; // optional
  public ezbake.base.thrift.DateTime birthDate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE((short)1, "base"),
    FIRST_NAME((short)2, "firstName"),
    MIDDLE_NAME((short)3, "middleName"),
    LAST_NAME((short)4, "lastName"),
    ALIASES((short)5, "aliases"),
    COUNTRY((short)6, "country"),
    TYPE((short)7, "type"),
    TKB_ID((short)8, "tkbId"),
    TIDE_ID((short)9, "tideId"),
    BIRTH_DATE((short)10, "birthDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE
          return BASE;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // MIDDLE_NAME
          return MIDDLE_NAME;
        case 4: // LAST_NAME
          return LAST_NAME;
        case 5: // ALIASES
          return ALIASES;
        case 6: // COUNTRY
          return COUNTRY;
        case 7: // TYPE
          return TYPE;
        case 8: // TKB_ID
          return TKB_ID;
        case 9: // TIDE_ID
          return TIDE_ID;
        case 10: // BIRTH_DATE
          return BIRTH_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FIRST_NAME,_Fields.MIDDLE_NAME,_Fields.LAST_NAME,_Fields.ALIASES,_Fields.COUNTRY,_Fields.TYPE,_Fields.TKB_ID,_Fields.TIDE_ID,_Fields.BIRTH_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.base.StandardObject.class)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("middleName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIASES, new org.apache.thrift.meta_data.FieldMetaData("aliases", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TKB_ID, new org.apache.thrift.meta_data.FieldMetaData("tkbId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIDE_ID, new org.apache.thrift.meta_data.FieldMetaData("tideId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTH_DATE, new org.apache.thrift.meta_data.FieldMetaData("birthDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DateTime")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
  }

  public Person(
    ezbake.query.intents.base.StandardObject base)
  {
    this();
    this.base = base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    if (other.isSetBase()) {
      this.base = new ezbake.query.intents.base.StandardObject(other.base);
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetMiddleName()) {
      this.middleName = other.middleName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetAliases()) {
      List<String> __this__aliases = new ArrayList<String>(other.aliases);
      this.aliases = __this__aliases;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTkbId()) {
      this.tkbId = other.tkbId;
    }
    if (other.isSetTideId()) {
      this.tideId = other.tideId;
    }
    if (other.isSetBirthDate()) {
      this.birthDate = other.birthDate;
    }
  }

  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.base = null;
    this.firstName = null;
    this.middleName = null;
    this.lastName = null;
    this.aliases = null;
    this.country = null;
    this.type = null;
    this.tkbId = null;
    this.tideId = null;
    this.birthDate = null;
  }

  public ezbake.query.intents.base.StandardObject getBase() {
    return this.base;
  }

  public Person setBase(ezbake.query.intents.base.StandardObject base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public Person setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getMiddleName() {
    return this.middleName;
  }

  public Person setMiddleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  public void unsetMiddleName() {
    this.middleName = null;
  }

  /** Returns true if field middleName is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddleName() {
    return this.middleName != null;
  }

  public void setMiddleNameIsSet(boolean value) {
    if (!value) {
      this.middleName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public Person setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public int getAliasesSize() {
    return (this.aliases == null) ? 0 : this.aliases.size();
  }

  public java.util.Iterator<String> getAliasesIterator() {
    return (this.aliases == null) ? null : this.aliases.iterator();
  }

  public void addToAliases(String elem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<String>();
    }
    this.aliases.add(elem);
  }

  public List<String> getAliases() {
    return this.aliases;
  }

  public Person setAliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public void unsetAliases() {
    this.aliases = null;
  }

  /** Returns true if field aliases is set (has been assigned a value) and false otherwise */
  public boolean isSetAliases() {
    return this.aliases != null;
  }

  public void setAliasesIsSet(boolean value) {
    if (!value) {
      this.aliases = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public Person setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public Person setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getTkbId() {
    return this.tkbId;
  }

  public Person setTkbId(String tkbId) {
    this.tkbId = tkbId;
    return this;
  }

  public void unsetTkbId() {
    this.tkbId = null;
  }

  /** Returns true if field tkbId is set (has been assigned a value) and false otherwise */
  public boolean isSetTkbId() {
    return this.tkbId != null;
  }

  public void setTkbIdIsSet(boolean value) {
    if (!value) {
      this.tkbId = null;
    }
  }

  public String getTideId() {
    return this.tideId;
  }

  public Person setTideId(String tideId) {
    this.tideId = tideId;
    return this;
  }

  public void unsetTideId() {
    this.tideId = null;
  }

  /** Returns true if field tideId is set (has been assigned a value) and false otherwise */
  public boolean isSetTideId() {
    return this.tideId != null;
  }

  public void setTideIdIsSet(boolean value) {
    if (!value) {
      this.tideId = null;
    }
  }

  public ezbake.base.thrift.DateTime getBirthDate() {
    return this.birthDate;
  }

  public Person setBirthDate(ezbake.base.thrift.DateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  public void unsetBirthDate() {
    this.birthDate = null;
  }

  /** Returns true if field birthDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDate() {
    return this.birthDate != null;
  }

  public void setBirthDateIsSet(boolean value) {
    if (!value) {
      this.birthDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((ezbake.query.intents.base.StandardObject)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case MIDDLE_NAME:
      if (value == null) {
        unsetMiddleName();
      } else {
        setMiddleName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case ALIASES:
      if (value == null) {
        unsetAliases();
      } else {
        setAliases((List<String>)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case TKB_ID:
      if (value == null) {
        unsetTkbId();
      } else {
        setTkbId((String)value);
      }
      break;

    case TIDE_ID:
      if (value == null) {
        unsetTideId();
      } else {
        setTideId((String)value);
      }
      break;

    case BIRTH_DATE:
      if (value == null) {
        unsetBirthDate();
      } else {
        setBirthDate((ezbake.base.thrift.DateTime)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE:
      return getBase();

    case FIRST_NAME:
      return getFirstName();

    case MIDDLE_NAME:
      return getMiddleName();

    case LAST_NAME:
      return getLastName();

    case ALIASES:
      return getAliases();

    case COUNTRY:
      return getCountry();

    case TYPE:
      return getType();

    case TKB_ID:
      return getTkbId();

    case TIDE_ID:
      return getTideId();

    case BIRTH_DATE:
      return getBirthDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE:
      return isSetBase();
    case FIRST_NAME:
      return isSetFirstName();
    case MIDDLE_NAME:
      return isSetMiddleName();
    case LAST_NAME:
      return isSetLastName();
    case ALIASES:
      return isSetAliases();
    case COUNTRY:
      return isSetCountry();
    case TYPE:
      return isSetType();
    case TKB_ID:
      return isSetTkbId();
    case TIDE_ID:
      return isSetTideId();
    case BIRTH_DATE:
      return isSetBirthDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_middleName = true && this.isSetMiddleName();
    boolean that_present_middleName = true && that.isSetMiddleName();
    if (this_present_middleName || that_present_middleName) {
      if (!(this_present_middleName && that_present_middleName))
        return false;
      if (!this.middleName.equals(that.middleName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_aliases = true && this.isSetAliases();
    boolean that_present_aliases = true && that.isSetAliases();
    if (this_present_aliases || that_present_aliases) {
      if (!(this_present_aliases && that_present_aliases))
        return false;
      if (!this.aliases.equals(that.aliases))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_tkbId = true && this.isSetTkbId();
    boolean that_present_tkbId = true && that.isSetTkbId();
    if (this_present_tkbId || that_present_tkbId) {
      if (!(this_present_tkbId && that_present_tkbId))
        return false;
      if (!this.tkbId.equals(that.tkbId))
        return false;
    }

    boolean this_present_tideId = true && this.isSetTideId();
    boolean that_present_tideId = true && that.isSetTideId();
    if (this_present_tideId || that_present_tideId) {
      if (!(this_present_tideId && that_present_tideId))
        return false;
      if (!this.tideId.equals(that.tideId))
        return false;
    }

    boolean this_present_birthDate = true && this.isSetBirthDate();
    boolean that_present_birthDate = true && that.isSetBirthDate();
    if (this_present_birthDate || that_present_birthDate) {
      if (!(this_present_birthDate && that_present_birthDate))
        return false;
      if (!this.birthDate.equals(that.birthDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddleName()).compareTo(other.isSetMiddleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middleName, other.middleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliases()).compareTo(other.isSetAliases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliases, other.aliases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTkbId()).compareTo(other.isSetTkbId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTkbId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tkbId, other.tkbId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTideId()).compareTo(other.isSetTideId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTideId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tideId, other.tideId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthDate()).compareTo(other.isSetBirthDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDate, other.birthDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    if (isSetFirstName()) {
      if (!first) sb.append(", ");
      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
    }
    if (isSetMiddleName()) {
      if (!first) sb.append(", ");
      sb.append("middleName:");
      if (this.middleName == null) {
        sb.append("null");
      } else {
        sb.append(this.middleName);
      }
      first = false;
    }
    if (isSetLastName()) {
      if (!first) sb.append(", ");
      sb.append("lastName:");
      if (this.lastName == null) {
        sb.append("null");
      } else {
        sb.append(this.lastName);
      }
      first = false;
    }
    if (isSetAliases()) {
      if (!first) sb.append(", ");
      sb.append("aliases:");
      if (this.aliases == null) {
        sb.append("null");
      } else {
        sb.append(this.aliases);
      }
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetTkbId()) {
      if (!first) sb.append(", ");
      sb.append("tkbId:");
      if (this.tkbId == null) {
        sb.append("null");
      } else {
        sb.append(this.tkbId);
      }
      first = false;
    }
    if (isSetTideId()) {
      if (!first) sb.append(", ");
      sb.append("tideId:");
      if (this.tideId == null) {
        sb.append("null");
      } else {
        sb.append(this.tideId);
      }
      first = false;
    }
    if (isSetBirthDate()) {
      if (!first) sb.append(", ");
      sb.append("birthDate:");
      if (this.birthDate == null) {
        sb.append("null");
      } else {
        sb.append(this.birthDate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonStandardSchemeFactory implements SchemeFactory {
    public PersonStandardScheme getScheme() {
      return new PersonStandardScheme();
    }
  }

  private static class PersonStandardScheme extends StandardScheme<Person> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new ezbake.query.intents.base.StandardObject();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIDDLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middleName = iprot.readString();
              struct.setMiddleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALIASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.aliases = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.aliases.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAliasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TKB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tkbId = iprot.readString();
              struct.setTkbIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tideId = iprot.readString();
              struct.setTideIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BIRTH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.birthDate = new ezbake.base.thrift.DateTime();
              struct.birthDate.read(iprot);
              struct.setBirthDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Person struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.firstName != null) {
        if (struct.isSetFirstName()) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.middleName != null) {
        if (struct.isSetMiddleName()) {
          oprot.writeFieldBegin(MIDDLE_NAME_FIELD_DESC);
          oprot.writeString(struct.middleName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastName != null) {
        if (struct.isSetLastName()) {
          oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
          oprot.writeString(struct.lastName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aliases != null) {
        if (struct.isSetAliases()) {
          oprot.writeFieldBegin(ALIASES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aliases.size()));
            for (String _iter3 : struct.aliases)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeString(struct.country);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tkbId != null) {
        if (struct.isSetTkbId()) {
          oprot.writeFieldBegin(TKB_ID_FIELD_DESC);
          oprot.writeString(struct.tkbId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tideId != null) {
        if (struct.isSetTideId()) {
          oprot.writeFieldBegin(TIDE_ID_FIELD_DESC);
          oprot.writeString(struct.tideId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.birthDate != null) {
        if (struct.isSetBirthDate()) {
          oprot.writeFieldBegin(BIRTH_DATE_FIELD_DESC);
          struct.birthDate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonTupleSchemeFactory implements SchemeFactory {
    public PersonTupleScheme getScheme() {
      return new PersonTupleScheme();
    }
  }

  private static class PersonTupleScheme extends TupleScheme<Person> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.base.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetFirstName()) {
        optionals.set(0);
      }
      if (struct.isSetMiddleName()) {
        optionals.set(1);
      }
      if (struct.isSetLastName()) {
        optionals.set(2);
      }
      if (struct.isSetAliases()) {
        optionals.set(3);
      }
      if (struct.isSetCountry()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetTkbId()) {
        optionals.set(6);
      }
      if (struct.isSetTideId()) {
        optionals.set(7);
      }
      if (struct.isSetBirthDate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetMiddleName()) {
        oprot.writeString(struct.middleName);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetAliases()) {
        {
          oprot.writeI32(struct.aliases.size());
          for (String _iter4 : struct.aliases)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetTkbId()) {
        oprot.writeString(struct.tkbId);
      }
      if (struct.isSetTideId()) {
        oprot.writeString(struct.tideId);
      }
      if (struct.isSetBirthDate()) {
        struct.birthDate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.base = new ezbake.query.intents.base.StandardObject();
      struct.base.read(iprot);
      struct.setBaseIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.middleName = iprot.readString();
        struct.setMiddleNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.aliases = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.aliases.add(_elem7);
          }
        }
        struct.setAliasesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tkbId = iprot.readString();
        struct.setTkbIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tideId = iprot.readString();
        struct.setTideIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.birthDate = new ezbake.base.thrift.DateTime();
        struct.birthDate.read(iprot);
        struct.setBirthDateIsSet(true);
      }
    }
  }

}

