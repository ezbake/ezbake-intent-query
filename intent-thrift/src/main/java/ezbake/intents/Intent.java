/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.intents;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Intent extends org.apache.thrift.TUnion<Intent, Intent._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Intent");
  private static final org.apache.thrift.protocol.TField ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("activity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EQUIPMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("equipment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FACILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("facility", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY((short)1, "activity"),
    EQUIPMENT((short)2, "equipment"),
    EVENT((short)3, "event"),
    FACILITY((short)4, "facility"),
    IMAGE((short)5, "image"),
    ISSUE((short)6, "issue"),
    LOCATION((short)7, "location"),
    PERSON((short)8, "person"),
    RELATIONSHIP((short)9, "relationship"),
    REPORT((short)10, "report"),
    STATE((short)11, "state"),
    UNIT((short)12, "unit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY
          return ACTIVITY;
        case 2: // EQUIPMENT
          return EQUIPMENT;
        case 3: // EVENT
          return EVENT;
        case 4: // FACILITY
          return FACILITY;
        case 5: // IMAGE
          return IMAGE;
        case 6: // ISSUE
          return ISSUE;
        case 7: // LOCATION
          return LOCATION;
        case 8: // PERSON
          return PERSON;
        case 9: // RELATIONSHIP
          return RELATIONSHIP;
        case 10: // REPORT
          return REPORT;
        case 11: // STATE
          return STATE;
        case 12: // UNIT
          return UNIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("activity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Activity.class)));
    tmpMap.put(_Fields.EQUIPMENT, new org.apache.thrift.meta_data.FieldMetaData("equipment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Equipment.class)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Event.class)));
    tmpMap.put(_Fields.FACILITY, new org.apache.thrift.meta_data.FieldMetaData("facility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Facility.class)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Image.class)));
    tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Issue.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Location.class)));
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Person.class)));
    tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Relationship.class)));
    tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Report.class)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.State.class)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.Unit.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Intent.class, metaDataMap);
  }

  public Intent() {
    super();
  }

  public Intent(_Fields setField, Object value) {
    super(setField, value);
  }

  public Intent(Intent other) {
    super(other);
  }
  public Intent deepCopy() {
    return new Intent(this);
  }

  public static Intent activity(ezbake.query.intents.Activity value) {
    Intent x = new Intent();
    x.setActivity(value);
    return x;
  }

  public static Intent equipment(ezbake.query.intents.Equipment value) {
    Intent x = new Intent();
    x.setEquipment(value);
    return x;
  }

  public static Intent event(ezbake.query.intents.Event value) {
    Intent x = new Intent();
    x.setEvent(value);
    return x;
  }

  public static Intent facility(ezbake.query.intents.Facility value) {
    Intent x = new Intent();
    x.setFacility(value);
    return x;
  }

  public static Intent image(ezbake.query.intents.Image value) {
    Intent x = new Intent();
    x.setImage(value);
    return x;
  }

  public static Intent issue(ezbake.query.intents.Issue value) {
    Intent x = new Intent();
    x.setIssue(value);
    return x;
  }

  public static Intent location(ezbake.query.intents.Location value) {
    Intent x = new Intent();
    x.setLocation(value);
    return x;
  }

  public static Intent person(ezbake.query.intents.Person value) {
    Intent x = new Intent();
    x.setPerson(value);
    return x;
  }

  public static Intent relationship(ezbake.query.intents.Relationship value) {
    Intent x = new Intent();
    x.setRelationship(value);
    return x;
  }

  public static Intent report(ezbake.query.intents.Report value) {
    Intent x = new Intent();
    x.setReport(value);
    return x;
  }

  public static Intent state(ezbake.query.intents.State value) {
    Intent x = new Intent();
    x.setState(value);
    return x;
  }

  public static Intent unit(ezbake.query.intents.Unit value) {
    Intent x = new Intent();
    x.setUnit(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case ACTIVITY:
        if (value instanceof ezbake.query.intents.Activity) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Activity for field 'activity', but got " + value.getClass().getSimpleName());
      case EQUIPMENT:
        if (value instanceof ezbake.query.intents.Equipment) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Equipment for field 'equipment', but got " + value.getClass().getSimpleName());
      case EVENT:
        if (value instanceof ezbake.query.intents.Event) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Event for field 'event', but got " + value.getClass().getSimpleName());
      case FACILITY:
        if (value instanceof ezbake.query.intents.Facility) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Facility for field 'facility', but got " + value.getClass().getSimpleName());
      case IMAGE:
        if (value instanceof ezbake.query.intents.Image) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Image for field 'image', but got " + value.getClass().getSimpleName());
      case ISSUE:
        if (value instanceof ezbake.query.intents.Issue) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Issue for field 'issue', but got " + value.getClass().getSimpleName());
      case LOCATION:
        if (value instanceof ezbake.query.intents.Location) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Location for field 'location', but got " + value.getClass().getSimpleName());
      case PERSON:
        if (value instanceof ezbake.query.intents.Person) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Person for field 'person', but got " + value.getClass().getSimpleName());
      case RELATIONSHIP:
        if (value instanceof ezbake.query.intents.Relationship) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Relationship for field 'relationship', but got " + value.getClass().getSimpleName());
      case REPORT:
        if (value instanceof ezbake.query.intents.Report) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Report for field 'report', but got " + value.getClass().getSimpleName());
      case STATE:
        if (value instanceof ezbake.query.intents.State) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.State for field 'state', but got " + value.getClass().getSimpleName());
      case UNIT:
        if (value instanceof ezbake.query.intents.Unit) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ezbake.query.intents.Unit for field 'unit', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ACTIVITY:
          if (field.type == ACTIVITY_FIELD_DESC.type) {
            ezbake.query.intents.Activity activity;
            activity = new ezbake.query.intents.Activity();
            activity.read(iprot);
            return activity;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EQUIPMENT:
          if (field.type == EQUIPMENT_FIELD_DESC.type) {
            ezbake.query.intents.Equipment equipment;
            equipment = new ezbake.query.intents.Equipment();
            equipment.read(iprot);
            return equipment;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EVENT:
          if (field.type == EVENT_FIELD_DESC.type) {
            ezbake.query.intents.Event event;
            event = new ezbake.query.intents.Event();
            event.read(iprot);
            return event;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FACILITY:
          if (field.type == FACILITY_FIELD_DESC.type) {
            ezbake.query.intents.Facility facility;
            facility = new ezbake.query.intents.Facility();
            facility.read(iprot);
            return facility;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case IMAGE:
          if (field.type == IMAGE_FIELD_DESC.type) {
            ezbake.query.intents.Image image;
            image = new ezbake.query.intents.Image();
            image.read(iprot);
            return image;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ISSUE:
          if (field.type == ISSUE_FIELD_DESC.type) {
            ezbake.query.intents.Issue issue;
            issue = new ezbake.query.intents.Issue();
            issue.read(iprot);
            return issue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCATION:
          if (field.type == LOCATION_FIELD_DESC.type) {
            ezbake.query.intents.Location location;
            location = new ezbake.query.intents.Location();
            location.read(iprot);
            return location;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PERSON:
          if (field.type == PERSON_FIELD_DESC.type) {
            ezbake.query.intents.Person person;
            person = new ezbake.query.intents.Person();
            person.read(iprot);
            return person;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RELATIONSHIP:
          if (field.type == RELATIONSHIP_FIELD_DESC.type) {
            ezbake.query.intents.Relationship relationship;
            relationship = new ezbake.query.intents.Relationship();
            relationship.read(iprot);
            return relationship;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REPORT:
          if (field.type == REPORT_FIELD_DESC.type) {
            ezbake.query.intents.Report report;
            report = new ezbake.query.intents.Report();
            report.read(iprot);
            return report;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STATE:
          if (field.type == STATE_FIELD_DESC.type) {
            ezbake.query.intents.State state;
            state = new ezbake.query.intents.State();
            state.read(iprot);
            return state;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNIT:
          if (field.type == UNIT_FIELD_DESC.type) {
            ezbake.query.intents.Unit unit;
            unit = new ezbake.query.intents.Unit();
            unit.read(iprot);
            return unit;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ACTIVITY:
        ezbake.query.intents.Activity activity = (ezbake.query.intents.Activity)value_;
        activity.write(oprot);
        return;
      case EQUIPMENT:
        ezbake.query.intents.Equipment equipment = (ezbake.query.intents.Equipment)value_;
        equipment.write(oprot);
        return;
      case EVENT:
        ezbake.query.intents.Event event = (ezbake.query.intents.Event)value_;
        event.write(oprot);
        return;
      case FACILITY:
        ezbake.query.intents.Facility facility = (ezbake.query.intents.Facility)value_;
        facility.write(oprot);
        return;
      case IMAGE:
        ezbake.query.intents.Image image = (ezbake.query.intents.Image)value_;
        image.write(oprot);
        return;
      case ISSUE:
        ezbake.query.intents.Issue issue = (ezbake.query.intents.Issue)value_;
        issue.write(oprot);
        return;
      case LOCATION:
        ezbake.query.intents.Location location = (ezbake.query.intents.Location)value_;
        location.write(oprot);
        return;
      case PERSON:
        ezbake.query.intents.Person person = (ezbake.query.intents.Person)value_;
        person.write(oprot);
        return;
      case RELATIONSHIP:
        ezbake.query.intents.Relationship relationship = (ezbake.query.intents.Relationship)value_;
        relationship.write(oprot);
        return;
      case REPORT:
        ezbake.query.intents.Report report = (ezbake.query.intents.Report)value_;
        report.write(oprot);
        return;
      case STATE:
        ezbake.query.intents.State state = (ezbake.query.intents.State)value_;
        state.write(oprot);
        return;
      case UNIT:
        ezbake.query.intents.Unit unit = (ezbake.query.intents.Unit)value_;
        unit.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ACTIVITY:
          ezbake.query.intents.Activity activity;
          activity = new ezbake.query.intents.Activity();
          activity.read(iprot);
          return activity;
        case EQUIPMENT:
          ezbake.query.intents.Equipment equipment;
          equipment = new ezbake.query.intents.Equipment();
          equipment.read(iprot);
          return equipment;
        case EVENT:
          ezbake.query.intents.Event event;
          event = new ezbake.query.intents.Event();
          event.read(iprot);
          return event;
        case FACILITY:
          ezbake.query.intents.Facility facility;
          facility = new ezbake.query.intents.Facility();
          facility.read(iprot);
          return facility;
        case IMAGE:
          ezbake.query.intents.Image image;
          image = new ezbake.query.intents.Image();
          image.read(iprot);
          return image;
        case ISSUE:
          ezbake.query.intents.Issue issue;
          issue = new ezbake.query.intents.Issue();
          issue.read(iprot);
          return issue;
        case LOCATION:
          ezbake.query.intents.Location location;
          location = new ezbake.query.intents.Location();
          location.read(iprot);
          return location;
        case PERSON:
          ezbake.query.intents.Person person;
          person = new ezbake.query.intents.Person();
          person.read(iprot);
          return person;
        case RELATIONSHIP:
          ezbake.query.intents.Relationship relationship;
          relationship = new ezbake.query.intents.Relationship();
          relationship.read(iprot);
          return relationship;
        case REPORT:
          ezbake.query.intents.Report report;
          report = new ezbake.query.intents.Report();
          report.read(iprot);
          return report;
        case STATE:
          ezbake.query.intents.State state;
          state = new ezbake.query.intents.State();
          state.read(iprot);
          return state;
        case UNIT:
          ezbake.query.intents.Unit unit;
          unit = new ezbake.query.intents.Unit();
          unit.read(iprot);
          return unit;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ACTIVITY:
        ezbake.query.intents.Activity activity = (ezbake.query.intents.Activity)value_;
        activity.write(oprot);
        return;
      case EQUIPMENT:
        ezbake.query.intents.Equipment equipment = (ezbake.query.intents.Equipment)value_;
        equipment.write(oprot);
        return;
      case EVENT:
        ezbake.query.intents.Event event = (ezbake.query.intents.Event)value_;
        event.write(oprot);
        return;
      case FACILITY:
        ezbake.query.intents.Facility facility = (ezbake.query.intents.Facility)value_;
        facility.write(oprot);
        return;
      case IMAGE:
        ezbake.query.intents.Image image = (ezbake.query.intents.Image)value_;
        image.write(oprot);
        return;
      case ISSUE:
        ezbake.query.intents.Issue issue = (ezbake.query.intents.Issue)value_;
        issue.write(oprot);
        return;
      case LOCATION:
        ezbake.query.intents.Location location = (ezbake.query.intents.Location)value_;
        location.write(oprot);
        return;
      case PERSON:
        ezbake.query.intents.Person person = (ezbake.query.intents.Person)value_;
        person.write(oprot);
        return;
      case RELATIONSHIP:
        ezbake.query.intents.Relationship relationship = (ezbake.query.intents.Relationship)value_;
        relationship.write(oprot);
        return;
      case REPORT:
        ezbake.query.intents.Report report = (ezbake.query.intents.Report)value_;
        report.write(oprot);
        return;
      case STATE:
        ezbake.query.intents.State state = (ezbake.query.intents.State)value_;
        state.write(oprot);
        return;
      case UNIT:
        ezbake.query.intents.Unit unit = (ezbake.query.intents.Unit)value_;
        unit.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ACTIVITY:
        return ACTIVITY_FIELD_DESC;
      case EQUIPMENT:
        return EQUIPMENT_FIELD_DESC;
      case EVENT:
        return EVENT_FIELD_DESC;
      case FACILITY:
        return FACILITY_FIELD_DESC;
      case IMAGE:
        return IMAGE_FIELD_DESC;
      case ISSUE:
        return ISSUE_FIELD_DESC;
      case LOCATION:
        return LOCATION_FIELD_DESC;
      case PERSON:
        return PERSON_FIELD_DESC;
      case RELATIONSHIP:
        return RELATIONSHIP_FIELD_DESC;
      case REPORT:
        return REPORT_FIELD_DESC;
      case STATE:
        return STATE_FIELD_DESC;
      case UNIT:
        return UNIT_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public ezbake.query.intents.Activity getActivity() {
    if (getSetField() == _Fields.ACTIVITY) {
      return (ezbake.query.intents.Activity)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'activity' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setActivity(ezbake.query.intents.Activity value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ACTIVITY;
    value_ = value;
  }

  public ezbake.query.intents.Equipment getEquipment() {
    if (getSetField() == _Fields.EQUIPMENT) {
      return (ezbake.query.intents.Equipment)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'equipment' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEquipment(ezbake.query.intents.Equipment value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.EQUIPMENT;
    value_ = value;
  }

  public ezbake.query.intents.Event getEvent() {
    if (getSetField() == _Fields.EVENT) {
      return (ezbake.query.intents.Event)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'event' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEvent(ezbake.query.intents.Event value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.EVENT;
    value_ = value;
  }

  public ezbake.query.intents.Facility getFacility() {
    if (getSetField() == _Fields.FACILITY) {
      return (ezbake.query.intents.Facility)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'facility' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFacility(ezbake.query.intents.Facility value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FACILITY;
    value_ = value;
  }

  public ezbake.query.intents.Image getImage() {
    if (getSetField() == _Fields.IMAGE) {
      return (ezbake.query.intents.Image)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'image' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setImage(ezbake.query.intents.Image value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.IMAGE;
    value_ = value;
  }

  public ezbake.query.intents.Issue getIssue() {
    if (getSetField() == _Fields.ISSUE) {
      return (ezbake.query.intents.Issue)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'issue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIssue(ezbake.query.intents.Issue value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ISSUE;
    value_ = value;
  }

  public ezbake.query.intents.Location getLocation() {
    if (getSetField() == _Fields.LOCATION) {
      return (ezbake.query.intents.Location)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'location' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLocation(ezbake.query.intents.Location value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOCATION;
    value_ = value;
  }

  public ezbake.query.intents.Person getPerson() {
    if (getSetField() == _Fields.PERSON) {
      return (ezbake.query.intents.Person)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'person' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPerson(ezbake.query.intents.Person value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PERSON;
    value_ = value;
  }

  public ezbake.query.intents.Relationship getRelationship() {
    if (getSetField() == _Fields.RELATIONSHIP) {
      return (ezbake.query.intents.Relationship)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'relationship' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRelationship(ezbake.query.intents.Relationship value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RELATIONSHIP;
    value_ = value;
  }

  public ezbake.query.intents.Report getReport() {
    if (getSetField() == _Fields.REPORT) {
      return (ezbake.query.intents.Report)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'report' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setReport(ezbake.query.intents.Report value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REPORT;
    value_ = value;
  }

  public ezbake.query.intents.State getState() {
    if (getSetField() == _Fields.STATE) {
      return (ezbake.query.intents.State)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'state' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setState(ezbake.query.intents.State value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STATE;
    value_ = value;
  }

  public ezbake.query.intents.Unit getUnit() {
    if (getSetField() == _Fields.UNIT) {
      return (ezbake.query.intents.Unit)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unit' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnit(ezbake.query.intents.Unit value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNIT;
    value_ = value;
  }

  public boolean isSetActivity() {
    return setField_ == _Fields.ACTIVITY;
  }


  public boolean isSetEquipment() {
    return setField_ == _Fields.EQUIPMENT;
  }


  public boolean isSetEvent() {
    return setField_ == _Fields.EVENT;
  }


  public boolean isSetFacility() {
    return setField_ == _Fields.FACILITY;
  }


  public boolean isSetImage() {
    return setField_ == _Fields.IMAGE;
  }


  public boolean isSetIssue() {
    return setField_ == _Fields.ISSUE;
  }


  public boolean isSetLocation() {
    return setField_ == _Fields.LOCATION;
  }


  public boolean isSetPerson() {
    return setField_ == _Fields.PERSON;
  }


  public boolean isSetRelationship() {
    return setField_ == _Fields.RELATIONSHIP;
  }


  public boolean isSetReport() {
    return setField_ == _Fields.REPORT;
  }


  public boolean isSetState() {
    return setField_ == _Fields.STATE;
  }


  public boolean isSetUnit() {
    return setField_ == _Fields.UNIT;
  }


  public boolean equals(Object other) {
    if (other instanceof Intent) {
      return equals((Intent)other);
    } else {
      return false;
    }
  }

  public boolean equals(Intent other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Intent other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
