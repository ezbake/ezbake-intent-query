/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.basequeryableprocedure;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PrepareStats implements org.apache.thrift.TBase<PrepareStats, PrepareStats._Fields>, java.io.Serializable, Cloneable, Comparable<PrepareStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrepareStats");

  private static final org.apache.thrift.protocol.TField NUMBER_OF_ROWS_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfRowsEstimate", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCEPTED_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedConjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrepareStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrepareStatsTupleSchemeFactory());
  }

  public int numberOfRowsEstimate; // required
  public List<Integer> acceptedConjuncts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER_OF_ROWS_ESTIMATE((short)1, "numberOfRowsEstimate"),
    ACCEPTED_CONJUNCTS((short)2, "acceptedConjuncts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER_OF_ROWS_ESTIMATE
          return NUMBER_OF_ROWS_ESTIMATE;
        case 2: // ACCEPTED_CONJUNCTS
          return ACCEPTED_CONJUNCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFROWSESTIMATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER_OF_ROWS_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("numberOfRowsEstimate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCEPTED_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("acceptedConjuncts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrepareStats.class, metaDataMap);
  }

  public PrepareStats() {
  }

  public PrepareStats(
    int numberOfRowsEstimate,
    List<Integer> acceptedConjuncts)
  {
    this();
    this.numberOfRowsEstimate = numberOfRowsEstimate;
    setNumberOfRowsEstimateIsSet(true);
    this.acceptedConjuncts = acceptedConjuncts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrepareStats(PrepareStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numberOfRowsEstimate = other.numberOfRowsEstimate;
    if (other.isSetAcceptedConjuncts()) {
      List<Integer> __this__acceptedConjuncts = new ArrayList<Integer>(other.acceptedConjuncts);
      this.acceptedConjuncts = __this__acceptedConjuncts;
    }
  }

  public PrepareStats deepCopy() {
    return new PrepareStats(this);
  }

  @Override
  public void clear() {
    setNumberOfRowsEstimateIsSet(false);
    this.numberOfRowsEstimate = 0;
    this.acceptedConjuncts = null;
  }

  public int getNumberOfRowsEstimate() {
    return this.numberOfRowsEstimate;
  }

  public PrepareStats setNumberOfRowsEstimate(int numberOfRowsEstimate) {
    this.numberOfRowsEstimate = numberOfRowsEstimate;
    setNumberOfRowsEstimateIsSet(true);
    return this;
  }

  public void unsetNumberOfRowsEstimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFROWSESTIMATE_ISSET_ID);
  }

  /** Returns true if field numberOfRowsEstimate is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfRowsEstimate() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFROWSESTIMATE_ISSET_ID);
  }

  public void setNumberOfRowsEstimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFROWSESTIMATE_ISSET_ID, value);
  }

  public int getAcceptedConjunctsSize() {
    return (this.acceptedConjuncts == null) ? 0 : this.acceptedConjuncts.size();
  }

  public java.util.Iterator<Integer> getAcceptedConjunctsIterator() {
    return (this.acceptedConjuncts == null) ? null : this.acceptedConjuncts.iterator();
  }

  public void addToAcceptedConjuncts(int elem) {
    if (this.acceptedConjuncts == null) {
      this.acceptedConjuncts = new ArrayList<Integer>();
    }
    this.acceptedConjuncts.add(elem);
  }

  public List<Integer> getAcceptedConjuncts() {
    return this.acceptedConjuncts;
  }

  public PrepareStats setAcceptedConjuncts(List<Integer> acceptedConjuncts) {
    this.acceptedConjuncts = acceptedConjuncts;
    return this;
  }

  public void unsetAcceptedConjuncts() {
    this.acceptedConjuncts = null;
  }

  /** Returns true if field acceptedConjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceptedConjuncts() {
    return this.acceptedConjuncts != null;
  }

  public void setAcceptedConjunctsIsSet(boolean value) {
    if (!value) {
      this.acceptedConjuncts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER_OF_ROWS_ESTIMATE:
      if (value == null) {
        unsetNumberOfRowsEstimate();
      } else {
        setNumberOfRowsEstimate((Integer)value);
      }
      break;

    case ACCEPTED_CONJUNCTS:
      if (value == null) {
        unsetAcceptedConjuncts();
      } else {
        setAcceptedConjuncts((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER_OF_ROWS_ESTIMATE:
      return Integer.valueOf(getNumberOfRowsEstimate());

    case ACCEPTED_CONJUNCTS:
      return getAcceptedConjuncts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER_OF_ROWS_ESTIMATE:
      return isSetNumberOfRowsEstimate();
    case ACCEPTED_CONJUNCTS:
      return isSetAcceptedConjuncts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrepareStats)
      return this.equals((PrepareStats)that);
    return false;
  }

  public boolean equals(PrepareStats that) {
    if (that == null)
      return false;

    boolean this_present_numberOfRowsEstimate = true;
    boolean that_present_numberOfRowsEstimate = true;
    if (this_present_numberOfRowsEstimate || that_present_numberOfRowsEstimate) {
      if (!(this_present_numberOfRowsEstimate && that_present_numberOfRowsEstimate))
        return false;
      if (this.numberOfRowsEstimate != that.numberOfRowsEstimate)
        return false;
    }

    boolean this_present_acceptedConjuncts = true && this.isSetAcceptedConjuncts();
    boolean that_present_acceptedConjuncts = true && that.isSetAcceptedConjuncts();
    if (this_present_acceptedConjuncts || that_present_acceptedConjuncts) {
      if (!(this_present_acceptedConjuncts && that_present_acceptedConjuncts))
        return false;
      if (!this.acceptedConjuncts.equals(that.acceptedConjuncts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PrepareStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumberOfRowsEstimate()).compareTo(other.isSetNumberOfRowsEstimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfRowsEstimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfRowsEstimate, other.numberOfRowsEstimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcceptedConjuncts()).compareTo(other.isSetAcceptedConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceptedConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedConjuncts, other.acceptedConjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrepareStats(");
    boolean first = true;

    sb.append("numberOfRowsEstimate:");
    sb.append(this.numberOfRowsEstimate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceptedConjuncts:");
    if (this.acceptedConjuncts == null) {
      sb.append("null");
    } else {
      sb.append(this.acceptedConjuncts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numberOfRowsEstimate' because it's a primitive and you chose the non-beans generator.
    if (acceptedConjuncts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acceptedConjuncts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrepareStatsStandardSchemeFactory implements SchemeFactory {
    public PrepareStatsStandardScheme getScheme() {
      return new PrepareStatsStandardScheme();
    }
  }

  private static class PrepareStatsStandardScheme extends StandardScheme<PrepareStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrepareStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER_OF_ROWS_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfRowsEstimate = iprot.readI32();
              struct.setNumberOfRowsEstimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCEPTED_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.acceptedConjuncts = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.acceptedConjuncts.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAcceptedConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumberOfRowsEstimate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfRowsEstimate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrepareStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUMBER_OF_ROWS_ESTIMATE_FIELD_DESC);
      oprot.writeI32(struct.numberOfRowsEstimate);
      oprot.writeFieldEnd();
      if (struct.acceptedConjuncts != null) {
        oprot.writeFieldBegin(ACCEPTED_CONJUNCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.acceptedConjuncts.size()));
          for (int _iter3 : struct.acceptedConjuncts)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrepareStatsTupleSchemeFactory implements SchemeFactory {
    public PrepareStatsTupleScheme getScheme() {
      return new PrepareStatsTupleScheme();
    }
  }

  private static class PrepareStatsTupleScheme extends TupleScheme<PrepareStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrepareStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.numberOfRowsEstimate);
      {
        oprot.writeI32(struct.acceptedConjuncts.size());
        for (int _iter4 : struct.acceptedConjuncts)
        {
          oprot.writeI32(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrepareStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.numberOfRowsEstimate = iprot.readI32();
      struct.setNumberOfRowsEstimateIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.acceptedConjuncts = new ArrayList<Integer>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          int _elem7;
          _elem7 = iprot.readI32();
          struct.acceptedConjuncts.add(_elem7);
        }
      }
      struct.setAcceptedConjunctsIsSet(true);
    }
  }

}

