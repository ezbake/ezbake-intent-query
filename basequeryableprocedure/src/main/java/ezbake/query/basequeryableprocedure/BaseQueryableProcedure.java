/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.query.basequeryableprocedure;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseQueryableProcedure {

  public interface Iface extends ezbake.base.thrift.procedures.BaseProcedure.Iface {

    public GetPageResult getPage(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws BaseQueryableProcedureException, org.apache.thrift.TException;

    public PrepareStats prepare(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws BaseQueryableProcedureException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.procedures.BaseProcedure .AsyncIface {

    public void getPage(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void prepare(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.procedures.BaseProcedure.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public GetPageResult getPage(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws BaseQueryableProcedureException, org.apache.thrift.TException
    {
      send_getPage(intenttype, page, columnnames, predicates, security);
      return recv_getPage();
    }

    public void send_getPage(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getPage_args args = new getPage_args();
      args.setIntenttype(intenttype);
      args.setPage(page);
      args.setColumnnames(columnnames);
      args.setPredicates(predicates);
      args.setSecurity(security);
      sendBase("getPage", args);
    }

    public GetPageResult recv_getPage() throws BaseQueryableProcedureException, org.apache.thrift.TException
    {
      getPage_result result = new getPage_result();
      receiveBase(result, "getPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.failure != null) {
        throw result.failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPage failed: unknown result");
    }

    public PrepareStats prepare(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws BaseQueryableProcedureException, org.apache.thrift.TException
    {
      send_prepare(table_name, init_string, predicates, security);
      return recv_prepare();
    }

    public void send_prepare(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      prepare_args args = new prepare_args();
      args.setTable_name(table_name);
      args.setInit_string(init_string);
      args.setPredicates(predicates);
      args.setSecurity(security);
      sendBase("prepare", args);
    }

    public PrepareStats recv_prepare() throws BaseQueryableProcedureException, org.apache.thrift.TException
    {
      prepare_result result = new prepare_result();
      receiveBase(result, "prepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.failure != null) {
        throw result.failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prepare failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.procedures.BaseProcedure.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPage(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPage_call method_call = new getPage_call(intenttype, page, columnnames, predicates, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.intents.IntentType intenttype;
      private Page page;
      private List<String> columnnames;
      private List<List<ezbake.query.intents.BinaryPredicate>> predicates;
      private ezbake.base.thrift.EzSecurityToken security;
      public getPage_call(ezbake.intents.IntentType intenttype, Page page, List<String> columnnames, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intenttype = intenttype;
        this.page = page;
        this.columnnames = columnnames;
        this.predicates = predicates;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPage_args args = new getPage_args();
        args.setIntenttype(intenttype);
        args.setPage(page);
        args.setColumnnames(columnnames);
        args.setPredicates(predicates);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetPageResult getResult() throws BaseQueryableProcedureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPage();
      }
    }

    public void prepare(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prepare_call method_call = new prepare_call(table_name, init_string, predicates, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table_name;
      private String init_string;
      private List<List<ezbake.query.intents.BinaryPredicate>> predicates;
      private ezbake.base.thrift.EzSecurityToken security;
      public prepare_call(String table_name, String init_string, List<List<ezbake.query.intents.BinaryPredicate>> predicates, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table_name = table_name;
        this.init_string = init_string;
        this.predicates = predicates;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prepare_args args = new prepare_args();
        args.setTable_name(table_name);
        args.setInit_string(init_string);
        args.setPredicates(predicates);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PrepareStats getResult() throws BaseQueryableProcedureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prepare();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.procedures.BaseProcedure.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPage", new getPage());
      processMap.put("prepare", new prepare());
      return processMap;
    }

    public static class getPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPage_args> {
      public getPage() {
        super("getPage");
      }

      public getPage_args getEmptyArgsInstance() {
        return new getPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPage_result getResult(I iface, getPage_args args) throws org.apache.thrift.TException {
        getPage_result result = new getPage_result();
        try {
          result.success = iface.getPage(args.intenttype, args.page, args.columnnames, args.predicates, args.security);
        } catch (BaseQueryableProcedureException failure) {
          result.failure = failure;
        }
        return result;
      }
    }

    public static class prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prepare_args> {
      public prepare() {
        super("prepare");
      }

      public prepare_args getEmptyArgsInstance() {
        return new prepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public prepare_result getResult(I iface, prepare_args args) throws org.apache.thrift.TException {
        prepare_result result = new prepare_result();
        try {
          result.success = iface.prepare(args.table_name, args.init_string, args.predicates, args.security);
        } catch (BaseQueryableProcedureException failure) {
          result.failure = failure;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.procedures.BaseProcedure.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPage", new getPage());
      processMap.put("prepare", new prepare());
      return processMap;
    }

    public static class getPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPage_args, GetPageResult> {
      public getPage() {
        super("getPage");
      }

      public getPage_args getEmptyArgsInstance() {
        return new getPage_args();
      }

      public AsyncMethodCallback<GetPageResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetPageResult>() { 
          public void onComplete(GetPageResult o) {
            getPage_result result = new getPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPage_result result = new getPage_result();
            if (e instanceof BaseQueryableProcedureException) {
                        result.failure = (BaseQueryableProcedureException) e;
                        result.setFailureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPage_args args, org.apache.thrift.async.AsyncMethodCallback<GetPageResult> resultHandler) throws TException {
        iface.getPage(args.intenttype, args.page, args.columnnames, args.predicates, args.security,resultHandler);
      }
    }

    public static class prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prepare_args, PrepareStats> {
      public prepare() {
        super("prepare");
      }

      public prepare_args getEmptyArgsInstance() {
        return new prepare_args();
      }

      public AsyncMethodCallback<PrepareStats> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PrepareStats>() { 
          public void onComplete(PrepareStats o) {
            prepare_result result = new prepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            prepare_result result = new prepare_result();
            if (e instanceof BaseQueryableProcedureException) {
                        result.failure = (BaseQueryableProcedureException) e;
                        result.setFailureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, prepare_args args, org.apache.thrift.async.AsyncMethodCallback<PrepareStats> resultHandler) throws TException {
        iface.prepare(args.table_name, args.init_string, args.predicates, args.security,resultHandler);
      }
    }

  }

  public static class getPage_args implements org.apache.thrift.TBase<getPage_args, getPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPage_args");

    private static final org.apache.thrift.protocol.TField INTENTTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("intenttype", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMNNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnnames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("predicates", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPage_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see ezbake.intents.IntentType
     */
    public ezbake.intents.IntentType intenttype; // required
    public Page page; // required
    public List<String> columnnames; // required
    public List<List<ezbake.query.intents.BinaryPredicate>> predicates; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ezbake.intents.IntentType
       */
      INTENTTYPE((short)1, "intenttype"),
      PAGE((short)2, "page"),
      COLUMNNAMES((short)3, "columnnames"),
      PREDICATES((short)4, "predicates"),
      SECURITY((short)5, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTENTTYPE
            return INTENTTYPE;
          case 2: // PAGE
            return PAGE;
          case 3: // COLUMNNAMES
            return COLUMNNAMES;
          case 4: // PREDICATES
            return PREDICATES;
          case 5: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTENTTYPE, new org.apache.thrift.meta_data.FieldMetaData("intenttype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ezbake.intents.IntentType.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
      tmpMap.put(_Fields.COLUMNNAMES, new org.apache.thrift.meta_data.FieldMetaData("columnnames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("predicates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.BinaryPredicate.class)))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPage_args.class, metaDataMap);
    }

    public getPage_args() {
    }

    public getPage_args(
      ezbake.intents.IntentType intenttype,
      Page page,
      List<String> columnnames,
      List<List<ezbake.query.intents.BinaryPredicate>> predicates,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.intenttype = intenttype;
      this.page = page;
      this.columnnames = columnnames;
      this.predicates = predicates;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPage_args(getPage_args other) {
      if (other.isSetIntenttype()) {
        this.intenttype = other.intenttype;
      }
      if (other.isSetPage()) {
        this.page = new Page(other.page);
      }
      if (other.isSetColumnnames()) {
        List<String> __this__columnnames = new ArrayList<String>(other.columnnames);
        this.columnnames = __this__columnnames;
      }
      if (other.isSetPredicates()) {
        List<List<ezbake.query.intents.BinaryPredicate>> __this__predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(other.predicates.size());
        for (List<ezbake.query.intents.BinaryPredicate> other_element : other.predicates) {
          List<ezbake.query.intents.BinaryPredicate> __this__predicates_copy = new ArrayList<ezbake.query.intents.BinaryPredicate>(other_element.size());
          for (ezbake.query.intents.BinaryPredicate other_element_element : other_element) {
            __this__predicates_copy.add(new ezbake.query.intents.BinaryPredicate(other_element_element));
          }
          __this__predicates.add(__this__predicates_copy);
        }
        this.predicates = __this__predicates;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getPage_args deepCopy() {
      return new getPage_args(this);
    }

    @Override
    public void clear() {
      this.intenttype = null;
      this.page = null;
      this.columnnames = null;
      this.predicates = null;
      this.security = null;
    }

    /**
     * 
     * @see ezbake.intents.IntentType
     */
    public ezbake.intents.IntentType getIntenttype() {
      return this.intenttype;
    }

    /**
     * 
     * @see ezbake.intents.IntentType
     */
    public getPage_args setIntenttype(ezbake.intents.IntentType intenttype) {
      this.intenttype = intenttype;
      return this;
    }

    public void unsetIntenttype() {
      this.intenttype = null;
    }

    /** Returns true if field intenttype is set (has been assigned a value) and false otherwise */
    public boolean isSetIntenttype() {
      return this.intenttype != null;
    }

    public void setIntenttypeIsSet(boolean value) {
      if (!value) {
        this.intenttype = null;
      }
    }

    public Page getPage() {
      return this.page;
    }

    public getPage_args setPage(Page page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public int getColumnnamesSize() {
      return (this.columnnames == null) ? 0 : this.columnnames.size();
    }

    public java.util.Iterator<String> getColumnnamesIterator() {
      return (this.columnnames == null) ? null : this.columnnames.iterator();
    }

    public void addToColumnnames(String elem) {
      if (this.columnnames == null) {
        this.columnnames = new ArrayList<String>();
      }
      this.columnnames.add(elem);
    }

    public List<String> getColumnnames() {
      return this.columnnames;
    }

    public getPage_args setColumnnames(List<String> columnnames) {
      this.columnnames = columnnames;
      return this;
    }

    public void unsetColumnnames() {
      this.columnnames = null;
    }

    /** Returns true if field columnnames is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnnames() {
      return this.columnnames != null;
    }

    public void setColumnnamesIsSet(boolean value) {
      if (!value) {
        this.columnnames = null;
      }
    }

    public int getPredicatesSize() {
      return (this.predicates == null) ? 0 : this.predicates.size();
    }

    public java.util.Iterator<List<ezbake.query.intents.BinaryPredicate>> getPredicatesIterator() {
      return (this.predicates == null) ? null : this.predicates.iterator();
    }

    public void addToPredicates(List<ezbake.query.intents.BinaryPredicate> elem) {
      if (this.predicates == null) {
        this.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>();
      }
      this.predicates.add(elem);
    }

    public List<List<ezbake.query.intents.BinaryPredicate>> getPredicates() {
      return this.predicates;
    }

    public getPage_args setPredicates(List<List<ezbake.query.intents.BinaryPredicate>> predicates) {
      this.predicates = predicates;
      return this;
    }

    public void unsetPredicates() {
      this.predicates = null;
    }

    /** Returns true if field predicates is set (has been assigned a value) and false otherwise */
    public boolean isSetPredicates() {
      return this.predicates != null;
    }

    public void setPredicatesIsSet(boolean value) {
      if (!value) {
        this.predicates = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getPage_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTENTTYPE:
        if (value == null) {
          unsetIntenttype();
        } else {
          setIntenttype((ezbake.intents.IntentType)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Page)value);
        }
        break;

      case COLUMNNAMES:
        if (value == null) {
          unsetColumnnames();
        } else {
          setColumnnames((List<String>)value);
        }
        break;

      case PREDICATES:
        if (value == null) {
          unsetPredicates();
        } else {
          setPredicates((List<List<ezbake.query.intents.BinaryPredicate>>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTENTTYPE:
        return getIntenttype();

      case PAGE:
        return getPage();

      case COLUMNNAMES:
        return getColumnnames();

      case PREDICATES:
        return getPredicates();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTENTTYPE:
        return isSetIntenttype();
      case PAGE:
        return isSetPage();
      case COLUMNNAMES:
        return isSetColumnnames();
      case PREDICATES:
        return isSetPredicates();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPage_args)
        return this.equals((getPage_args)that);
      return false;
    }

    public boolean equals(getPage_args that) {
      if (that == null)
        return false;

      boolean this_present_intenttype = true && this.isSetIntenttype();
      boolean that_present_intenttype = true && that.isSetIntenttype();
      if (this_present_intenttype || that_present_intenttype) {
        if (!(this_present_intenttype && that_present_intenttype))
          return false;
        if (!this.intenttype.equals(that.intenttype))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_columnnames = true && this.isSetColumnnames();
      boolean that_present_columnnames = true && that.isSetColumnnames();
      if (this_present_columnnames || that_present_columnnames) {
        if (!(this_present_columnnames && that_present_columnnames))
          return false;
        if (!this.columnnames.equals(that.columnnames))
          return false;
      }

      boolean this_present_predicates = true && this.isSetPredicates();
      boolean that_present_predicates = true && that.isSetPredicates();
      if (this_present_predicates || that_present_predicates) {
        if (!(this_present_predicates && that_present_predicates))
          return false;
        if (!this.predicates.equals(that.predicates))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntenttype()).compareTo(other.isSetIntenttype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntenttype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intenttype, other.intenttype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnnames()).compareTo(other.isSetColumnnames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnnames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnnames, other.columnnames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPredicates()).compareTo(other.isSetPredicates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPredicates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicates, other.predicates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPage_args(");
      boolean first = true;

      sb.append("intenttype:");
      if (this.intenttype == null) {
        sb.append("null");
      } else {
        sb.append(this.intenttype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnnames:");
      if (this.columnnames == null) {
        sb.append("null");
      } else {
        sb.append(this.columnnames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("predicates:");
      if (this.predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.predicates);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPage_argsStandardSchemeFactory implements SchemeFactory {
      public getPage_argsStandardScheme getScheme() {
        return new getPage_argsStandardScheme();
      }
    }

    private static class getPage_argsStandardScheme extends StandardScheme<getPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTENTTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.intenttype = ezbake.intents.IntentType.findByValue(iprot.readI32());
                struct.setIntenttypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new Page();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMNNAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.columnnames = new ArrayList<String>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    String _elem90;
                    _elem90 = iprot.readString();
                    struct.columnnames.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnnamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREDICATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                  struct.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(_list91.size);
                  for (int _i92 = 0; _i92 < _list91.size; ++_i92)
                  {
                    List<ezbake.query.intents.BinaryPredicate> _elem93;
                    {
                      org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                      _elem93 = new ArrayList<ezbake.query.intents.BinaryPredicate>(_list94.size);
                      for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                      {
                        ezbake.query.intents.BinaryPredicate _elem96;
                        _elem96 = new ezbake.query.intents.BinaryPredicate();
                        _elem96.read(iprot);
                        _elem93.add(_elem96);
                      }
                      iprot.readListEnd();
                    }
                    struct.predicates.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setPredicatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intenttype != null) {
          oprot.writeFieldBegin(INTENTTYPE_FIELD_DESC);
          oprot.writeI32(struct.intenttype.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.columnnames != null) {
          oprot.writeFieldBegin(COLUMNNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnnames.size()));
            for (String _iter97 : struct.columnnames)
            {
              oprot.writeString(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.predicates != null) {
          oprot.writeFieldBegin(PREDICATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.predicates.size()));
            for (List<ezbake.query.intents.BinaryPredicate> _iter98 : struct.predicates)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter98.size()));
                for (ezbake.query.intents.BinaryPredicate _iter99 : _iter98)
                {
                  _iter99.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPage_argsTupleSchemeFactory implements SchemeFactory {
      public getPage_argsTupleScheme getScheme() {
        return new getPage_argsTupleScheme();
      }
    }

    private static class getPage_argsTupleScheme extends TupleScheme<getPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntenttype()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetColumnnames()) {
          optionals.set(2);
        }
        if (struct.isSetPredicates()) {
          optionals.set(3);
        }
        if (struct.isSetSecurity()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetIntenttype()) {
          oprot.writeI32(struct.intenttype.getValue());
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetColumnnames()) {
          {
            oprot.writeI32(struct.columnnames.size());
            for (String _iter100 : struct.columnnames)
            {
              oprot.writeString(_iter100);
            }
          }
        }
        if (struct.isSetPredicates()) {
          {
            oprot.writeI32(struct.predicates.size());
            for (List<ezbake.query.intents.BinaryPredicate> _iter101 : struct.predicates)
            {
              {
                oprot.writeI32(_iter101.size());
                for (ezbake.query.intents.BinaryPredicate _iter102 : _iter101)
                {
                  _iter102.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.intenttype = ezbake.intents.IntentType.findByValue(iprot.readI32());
          struct.setIntenttypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new Page();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnnames = new ArrayList<String>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              String _elem105;
              _elem105 = iprot.readString();
              struct.columnnames.add(_elem105);
            }
          }
          struct.setColumnnamesIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(_list106.size);
            for (int _i107 = 0; _i107 < _list106.size; ++_i107)
            {
              List<ezbake.query.intents.BinaryPredicate> _elem108;
              {
                org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem108 = new ArrayList<ezbake.query.intents.BinaryPredicate>(_list109.size);
                for (int _i110 = 0; _i110 < _list109.size; ++_i110)
                {
                  ezbake.query.intents.BinaryPredicate _elem111;
                  _elem111 = new ezbake.query.intents.BinaryPredicate();
                  _elem111.read(iprot);
                  _elem108.add(_elem111);
                }
              }
              struct.predicates.add(_elem108);
            }
          }
          struct.setPredicatesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getPage_result implements org.apache.thrift.TBase<getPage_result, getPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPage_resultTupleSchemeFactory());
    }

    public GetPageResult success; // required
    public BaseQueryableProcedureException failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAILURE((short)1, "failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAILURE
            return FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetPageResult.class)));
      tmpMap.put(_Fields.FAILURE, new org.apache.thrift.meta_data.FieldMetaData("failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPage_result.class, metaDataMap);
    }

    public getPage_result() {
    }

    public getPage_result(
      GetPageResult success,
      BaseQueryableProcedureException failure)
    {
      this();
      this.success = success;
      this.failure = failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPage_result(getPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetPageResult(other.success);
      }
      if (other.isSetFailure()) {
        this.failure = new BaseQueryableProcedureException(other.failure);
      }
    }

    public getPage_result deepCopy() {
      return new getPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.failure = null;
    }

    public GetPageResult getSuccess() {
      return this.success;
    }

    public getPage_result setSuccess(GetPageResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BaseQueryableProcedureException getFailure() {
      return this.failure;
    }

    public getPage_result setFailure(BaseQueryableProcedureException failure) {
      this.failure = failure;
      return this;
    }

    public void unsetFailure() {
      this.failure = null;
    }

    /** Returns true if field failure is set (has been assigned a value) and false otherwise */
    public boolean isSetFailure() {
      return this.failure != null;
    }

    public void setFailureIsSet(boolean value) {
      if (!value) {
        this.failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetPageResult)value);
        }
        break;

      case FAILURE:
        if (value == null) {
          unsetFailure();
        } else {
          setFailure((BaseQueryableProcedureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAILURE:
        return getFailure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAILURE:
        return isSetFailure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPage_result)
        return this.equals((getPage_result)that);
      return false;
    }

    public boolean equals(getPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_failure = true && this.isSetFailure();
      boolean that_present_failure = true && that.isSetFailure();
      if (this_present_failure || that_present_failure) {
        if (!(this_present_failure && that_present_failure))
          return false;
        if (!this.failure.equals(that.failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFailure()).compareTo(other.isSetFailure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failure, other.failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("failure:");
      if (this.failure == null) {
        sb.append("null");
      } else {
        sb.append(this.failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPage_resultStandardSchemeFactory implements SchemeFactory {
      public getPage_resultStandardScheme getScheme() {
        return new getPage_resultStandardScheme();
      }
    }

    private static class getPage_resultStandardScheme extends StandardScheme<getPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetPageResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failure = new BaseQueryableProcedureException();
                struct.failure.read(iprot);
                struct.setFailureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.failure != null) {
          oprot.writeFieldBegin(FAILURE_FIELD_DESC);
          struct.failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPage_resultTupleSchemeFactory implements SchemeFactory {
      public getPage_resultTupleScheme getScheme() {
        return new getPage_resultTupleScheme();
      }
    }

    private static class getPage_resultTupleScheme extends TupleScheme<getPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFailure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFailure()) {
          struct.failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GetPageResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.failure = new BaseQueryableProcedureException();
          struct.failure.read(iprot);
          struct.setFailureIsSet(true);
        }
      }
    }

  }

  public static class prepare_args implements org.apache.thrift.TBase<prepare_args, prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<prepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepare_args");

    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INIT_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("init_string", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("predicates", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new prepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new prepare_argsTupleSchemeFactory());
    }

    public String table_name; // required
    public String init_string; // required
    public List<List<ezbake.query.intents.BinaryPredicate>> predicates; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE_NAME((short)1, "table_name"),
      INIT_STRING((short)2, "init_string"),
      PREDICATES((short)3, "predicates"),
      SECURITY((short)4, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_NAME
            return TABLE_NAME;
          case 2: // INIT_STRING
            return INIT_STRING;
          case 3: // PREDICATES
            return PREDICATES;
          case 4: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INIT_STRING, new org.apache.thrift.meta_data.FieldMetaData("init_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("predicates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.query.intents.BinaryPredicate.class)))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepare_args.class, metaDataMap);
    }

    public prepare_args() {
    }

    public prepare_args(
      String table_name,
      String init_string,
      List<List<ezbake.query.intents.BinaryPredicate>> predicates,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.table_name = table_name;
      this.init_string = init_string;
      this.predicates = predicates;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepare_args(prepare_args other) {
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetInit_string()) {
        this.init_string = other.init_string;
      }
      if (other.isSetPredicates()) {
        List<List<ezbake.query.intents.BinaryPredicate>> __this__predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(other.predicates.size());
        for (List<ezbake.query.intents.BinaryPredicate> other_element : other.predicates) {
          List<ezbake.query.intents.BinaryPredicate> __this__predicates_copy = new ArrayList<ezbake.query.intents.BinaryPredicate>(other_element.size());
          for (ezbake.query.intents.BinaryPredicate other_element_element : other_element) {
            __this__predicates_copy.add(new ezbake.query.intents.BinaryPredicate(other_element_element));
          }
          __this__predicates.add(__this__predicates_copy);
        }
        this.predicates = __this__predicates;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public prepare_args deepCopy() {
      return new prepare_args(this);
    }

    @Override
    public void clear() {
      this.table_name = null;
      this.init_string = null;
      this.predicates = null;
      this.security = null;
    }

    public String getTable_name() {
      return this.table_name;
    }

    public prepare_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getInit_string() {
      return this.init_string;
    }

    public prepare_args setInit_string(String init_string) {
      this.init_string = init_string;
      return this;
    }

    public void unsetInit_string() {
      this.init_string = null;
    }

    /** Returns true if field init_string is set (has been assigned a value) and false otherwise */
    public boolean isSetInit_string() {
      return this.init_string != null;
    }

    public void setInit_stringIsSet(boolean value) {
      if (!value) {
        this.init_string = null;
      }
    }

    public int getPredicatesSize() {
      return (this.predicates == null) ? 0 : this.predicates.size();
    }

    public java.util.Iterator<List<ezbake.query.intents.BinaryPredicate>> getPredicatesIterator() {
      return (this.predicates == null) ? null : this.predicates.iterator();
    }

    public void addToPredicates(List<ezbake.query.intents.BinaryPredicate> elem) {
      if (this.predicates == null) {
        this.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>();
      }
      this.predicates.add(elem);
    }

    public List<List<ezbake.query.intents.BinaryPredicate>> getPredicates() {
      return this.predicates;
    }

    public prepare_args setPredicates(List<List<ezbake.query.intents.BinaryPredicate>> predicates) {
      this.predicates = predicates;
      return this;
    }

    public void unsetPredicates() {
      this.predicates = null;
    }

    /** Returns true if field predicates is set (has been assigned a value) and false otherwise */
    public boolean isSetPredicates() {
      return this.predicates != null;
    }

    public void setPredicatesIsSet(boolean value) {
      if (!value) {
        this.predicates = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public prepare_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case INIT_STRING:
        if (value == null) {
          unsetInit_string();
        } else {
          setInit_string((String)value);
        }
        break;

      case PREDICATES:
        if (value == null) {
          unsetPredicates();
        } else {
          setPredicates((List<List<ezbake.query.intents.BinaryPredicate>>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_NAME:
        return getTable_name();

      case INIT_STRING:
        return getInit_string();

      case PREDICATES:
        return getPredicates();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE_NAME:
        return isSetTable_name();
      case INIT_STRING:
        return isSetInit_string();
      case PREDICATES:
        return isSetPredicates();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepare_args)
        return this.equals((prepare_args)that);
      return false;
    }

    public boolean equals(prepare_args that) {
      if (that == null)
        return false;

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_init_string = true && this.isSetInit_string();
      boolean that_present_init_string = true && that.isSetInit_string();
      if (this_present_init_string || that_present_init_string) {
        if (!(this_present_init_string && that_present_init_string))
          return false;
        if (!this.init_string.equals(that.init_string))
          return false;
      }

      boolean this_present_predicates = true && this.isSetPredicates();
      boolean that_present_predicates = true && that.isSetPredicates();
      if (this_present_predicates || that_present_predicates) {
        if (!(this_present_predicates && that_present_predicates))
          return false;
        if (!this.predicates.equals(that.predicates))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(prepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInit_string()).compareTo(other.isSetInit_string());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInit_string()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init_string, other.init_string);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPredicates()).compareTo(other.isSetPredicates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPredicates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicates, other.predicates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepare_args(");
      boolean first = true;

      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("init_string:");
      if (this.init_string == null) {
        sb.append("null");
      } else {
        sb.append(this.init_string);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("predicates:");
      if (this.predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.predicates);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prepare_argsStandardSchemeFactory implements SchemeFactory {
      public prepare_argsStandardScheme getScheme() {
        return new prepare_argsStandardScheme();
      }
    }

    private static class prepare_argsStandardScheme extends StandardScheme<prepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INIT_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.init_string = iprot.readString();
                struct.setInit_stringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREDICATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    List<ezbake.query.intents.BinaryPredicate> _elem114;
                    {
                      org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                      _elem114 = new ArrayList<ezbake.query.intents.BinaryPredicate>(_list115.size);
                      for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                      {
                        ezbake.query.intents.BinaryPredicate _elem117;
                        _elem117 = new ezbake.query.intents.BinaryPredicate();
                        _elem117.read(iprot);
                        _elem114.add(_elem117);
                      }
                      iprot.readListEnd();
                    }
                    struct.predicates.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setPredicatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.init_string != null) {
          oprot.writeFieldBegin(INIT_STRING_FIELD_DESC);
          oprot.writeString(struct.init_string);
          oprot.writeFieldEnd();
        }
        if (struct.predicates != null) {
          oprot.writeFieldBegin(PREDICATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.predicates.size()));
            for (List<ezbake.query.intents.BinaryPredicate> _iter118 : struct.predicates)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter118.size()));
                for (ezbake.query.intents.BinaryPredicate _iter119 : _iter118)
                {
                  _iter119.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prepare_argsTupleSchemeFactory implements SchemeFactory {
      public prepare_argsTupleScheme getScheme() {
        return new prepare_argsTupleScheme();
      }
    }

    private static class prepare_argsTupleScheme extends TupleScheme<prepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable_name()) {
          optionals.set(0);
        }
        if (struct.isSetInit_string()) {
          optionals.set(1);
        }
        if (struct.isSetPredicates()) {
          optionals.set(2);
        }
        if (struct.isSetSecurity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetInit_string()) {
          oprot.writeString(struct.init_string);
        }
        if (struct.isSetPredicates()) {
          {
            oprot.writeI32(struct.predicates.size());
            for (List<ezbake.query.intents.BinaryPredicate> _iter120 : struct.predicates)
            {
              {
                oprot.writeI32(_iter120.size());
                for (ezbake.query.intents.BinaryPredicate _iter121 : _iter120)
                {
                  _iter121.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.init_string = iprot.readString();
          struct.setInit_stringIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.predicates = new ArrayList<List<ezbake.query.intents.BinaryPredicate>>(_list122.size);
            for (int _i123 = 0; _i123 < _list122.size; ++_i123)
            {
              List<ezbake.query.intents.BinaryPredicate> _elem124;
              {
                org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem124 = new ArrayList<ezbake.query.intents.BinaryPredicate>(_list125.size);
                for (int _i126 = 0; _i126 < _list125.size; ++_i126)
                {
                  ezbake.query.intents.BinaryPredicate _elem127;
                  _elem127 = new ezbake.query.intents.BinaryPredicate();
                  _elem127.read(iprot);
                  _elem124.add(_elem127);
                }
              }
              struct.predicates.add(_elem124);
            }
          }
          struct.setPredicatesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class prepare_result implements org.apache.thrift.TBase<prepare_result, prepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<prepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new prepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new prepare_resultTupleSchemeFactory());
    }

    public PrepareStats success; // required
    public BaseQueryableProcedureException failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAILURE((short)1, "failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAILURE
            return FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareStats.class)));
      tmpMap.put(_Fields.FAILURE, new org.apache.thrift.meta_data.FieldMetaData("failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepare_result.class, metaDataMap);
    }

    public prepare_result() {
    }

    public prepare_result(
      PrepareStats success,
      BaseQueryableProcedureException failure)
    {
      this();
      this.success = success;
      this.failure = failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepare_result(prepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrepareStats(other.success);
      }
      if (other.isSetFailure()) {
        this.failure = new BaseQueryableProcedureException(other.failure);
      }
    }

    public prepare_result deepCopy() {
      return new prepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.failure = null;
    }

    public PrepareStats getSuccess() {
      return this.success;
    }

    public prepare_result setSuccess(PrepareStats success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BaseQueryableProcedureException getFailure() {
      return this.failure;
    }

    public prepare_result setFailure(BaseQueryableProcedureException failure) {
      this.failure = failure;
      return this;
    }

    public void unsetFailure() {
      this.failure = null;
    }

    /** Returns true if field failure is set (has been assigned a value) and false otherwise */
    public boolean isSetFailure() {
      return this.failure != null;
    }

    public void setFailureIsSet(boolean value) {
      if (!value) {
        this.failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrepareStats)value);
        }
        break;

      case FAILURE:
        if (value == null) {
          unsetFailure();
        } else {
          setFailure((BaseQueryableProcedureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAILURE:
        return getFailure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAILURE:
        return isSetFailure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepare_result)
        return this.equals((prepare_result)that);
      return false;
    }

    public boolean equals(prepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_failure = true && this.isSetFailure();
      boolean that_present_failure = true && that.isSetFailure();
      if (this_present_failure || that_present_failure) {
        if (!(this_present_failure && that_present_failure))
          return false;
        if (!this.failure.equals(that.failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(prepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFailure()).compareTo(other.isSetFailure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failure, other.failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("failure:");
      if (this.failure == null) {
        sb.append("null");
      } else {
        sb.append(this.failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prepare_resultStandardSchemeFactory implements SchemeFactory {
      public prepare_resultStandardScheme getScheme() {
        return new prepare_resultStandardScheme();
      }
    }

    private static class prepare_resultStandardScheme extends StandardScheme<prepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrepareStats();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failure = new BaseQueryableProcedureException();
                struct.failure.read(iprot);
                struct.setFailureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.failure != null) {
          oprot.writeFieldBegin(FAILURE_FIELD_DESC);
          struct.failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prepare_resultTupleSchemeFactory implements SchemeFactory {
      public prepare_resultTupleScheme getScheme() {
        return new prepare_resultTupleScheme();
      }
    }

    private static class prepare_resultTupleScheme extends TupleScheme<prepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFailure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFailure()) {
          struct.failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PrepareStats();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.failure = new BaseQueryableProcedureException();
          struct.failure.read(iprot);
          struct.setFailureIsSet(true);
        }
      }
    }

  }

}
